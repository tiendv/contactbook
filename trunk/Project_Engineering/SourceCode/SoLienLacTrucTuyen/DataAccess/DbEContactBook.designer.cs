#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EContactBook.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DbEContactBook")]
	public partial class DbEContactBookDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaspnet_Application(aspnet_Application instance);
    partial void Updateaspnet_Application(aspnet_Application instance);
    partial void Deleteaspnet_Application(aspnet_Application instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void Insertaspnet_Path(aspnet_Path instance);
    partial void Updateaspnet_Path(aspnet_Path instance);
    partial void Deleteaspnet_Path(aspnet_Path instance);
    partial void Insertaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Updateaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Deleteaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Insertaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Updateaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Deleteaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Insertaspnet_Profile(aspnet_Profile instance);
    partial void Updateaspnet_Profile(aspnet_Profile instance);
    partial void Deleteaspnet_Profile(aspnet_Profile instance);
    partial void Insertaspnet_Role(aspnet_Role instance);
    partial void Updateaspnet_Role(aspnet_Role instance);
    partial void Deleteaspnet_Role(aspnet_Role instance);
    partial void Insertaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Updateaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Deleteaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Insertaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Updateaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Deleteaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void InsertCategory_Conduct(Category_Conduct instance);
    partial void UpdateCategory_Conduct(Category_Conduct instance);
    partial void DeleteCategory_Conduct(Category_Conduct instance);
    partial void InsertCategory_DetailedLearningResult(Category_DetailedLearningResult instance);
    partial void UpdateCategory_DetailedLearningResult(Category_DetailedLearningResult instance);
    partial void DeleteCategory_DetailedLearningResult(Category_DetailedLearningResult instance);
    partial void InsertCategory_Faculty(Category_Faculty instance);
    partial void UpdateCategory_Faculty(Category_Faculty instance);
    partial void DeleteCategory_Faculty(Category_Faculty instance);
    partial void InsertCategory_Grade(Category_Grade instance);
    partial void UpdateCategory_Grade(Category_Grade instance);
    partial void DeleteCategory_Grade(Category_Grade instance);
    partial void InsertCategory_LearningAptitude(Category_LearningAptitude instance);
    partial void UpdateCategory_LearningAptitude(Category_LearningAptitude instance);
    partial void DeleteCategory_LearningAptitude(Category_LearningAptitude instance);
    partial void InsertCategory_LearningResult(Category_LearningResult instance);
    partial void UpdateCategory_LearningResult(Category_LearningResult instance);
    partial void DeleteCategory_LearningResult(Category_LearningResult instance);
    partial void InsertCategory_MarkType(Category_MarkType instance);
    partial void UpdateCategory_MarkType(Category_MarkType instance);
    partial void DeleteCategory_MarkType(Category_MarkType instance);
    partial void InsertCategory_Subject(Category_Subject instance);
    partial void UpdateCategory_Subject(Category_Subject instance);
    partial void DeleteCategory_Subject(Category_Subject instance);
    partial void InsertCategory_TeachingPeriod(Category_TeachingPeriod instance);
    partial void UpdateCategory_TeachingPeriod(Category_TeachingPeriod instance);
    partial void DeleteCategory_TeachingPeriod(Category_TeachingPeriod instance);
    partial void InsertClass_Class(Class_Class instance);
    partial void UpdateClass_Class(Class_Class instance);
    partial void DeleteClass_Class(Class_Class instance);
    partial void InsertClass_FormerTeacher(Class_FormerTeacher instance);
    partial void UpdateClass_FormerTeacher(Class_FormerTeacher instance);
    partial void DeleteClass_FormerTeacher(Class_FormerTeacher instance);
    partial void InsertConfiguration_CommentStatus(Configuration_CommentStatus instance);
    partial void UpdateConfiguration_CommentStatus(Configuration_CommentStatus instance);
    partial void DeleteConfiguration_CommentStatus(Configuration_CommentStatus instance);
    partial void InsertConfiguration_DayInWeek(Configuration_DayInWeek instance);
    partial void UpdateConfiguration_DayInWeek(Configuration_DayInWeek instance);
    partial void DeleteConfiguration_DayInWeek(Configuration_DayInWeek instance);
    partial void InsertConfiguration_District(Configuration_District instance);
    partial void UpdateConfiguration_District(Configuration_District instance);
    partial void DeleteConfiguration_District(Configuration_District instance);
    partial void InsertConfiguration_MessageStatus(Configuration_MessageStatus instance);
    partial void UpdateConfiguration_MessageStatus(Configuration_MessageStatus instance);
    partial void DeleteConfiguration_MessageStatus(Configuration_MessageStatus instance);
    partial void InsertConfiguration_Province(Configuration_Province instance);
    partial void UpdateConfiguration_Province(Configuration_Province instance);
    partial void DeleteConfiguration_Province(Configuration_Province instance);
    partial void InsertConfiguration_Session(Configuration_Session instance);
    partial void UpdateConfiguration_Session(Configuration_Session instance);
    partial void DeleteConfiguration_Session(Configuration_Session instance);
    partial void InsertConfiguration_Term(Configuration_Term instance);
    partial void UpdateConfiguration_Term(Configuration_Term instance);
    partial void DeleteConfiguration_Term(Configuration_Term instance);
    partial void InsertConfiguration_TermsInYear(Configuration_TermsInYear instance);
    partial void UpdateConfiguration_TermsInYear(Configuration_TermsInYear instance);
    partial void DeleteConfiguration_TermsInYear(Configuration_TermsInYear instance);
    partial void InsertConfiguration_Year(Configuration_Year instance);
    partial void UpdateConfiguration_Year(Configuration_Year instance);
    partial void DeleteConfiguration_Year(Configuration_Year instance);
    partial void InsertStudent_Absent(Student_Absent instance);
    partial void UpdateStudent_Absent(Student_Absent instance);
    partial void DeleteStudent_Absent(Student_Absent instance);
    partial void InsertStudent_Activity(Student_Activity instance);
    partial void UpdateStudent_Activity(Student_Activity instance);
    partial void DeleteStudent_Activity(Student_Activity instance);
    partial void InsertStudent_Student(Student_Student instance);
    partial void UpdateStudent_Student(Student_Student instance);
    partial void DeleteStudent_Student(Student_Student instance);
    partial void InsertStudent_StudentInClass(Student_StudentInClass instance);
    partial void UpdateStudent_StudentInClass(Student_StudentInClass instance);
    partial void DeleteStudent_StudentInClass(Student_StudentInClass instance);
    partial void InsertStudent_TermLearningResult(Student_TermLearningResult instance);
    partial void UpdateStudent_TermLearningResult(Student_TermLearningResult instance);
    partial void DeleteStudent_TermLearningResult(Student_TermLearningResult instance);
    partial void InsertStudent_TermSubjectMark(Student_TermSubjectMark instance);
    partial void UpdateStudent_TermSubjectMark(Student_TermSubjectMark instance);
    partial void DeleteStudent_TermSubjectMark(Student_TermSubjectMark instance);
    partial void InsertUserManagement_Accessibility(UserManagement_Accessibility instance);
    partial void UpdateUserManagement_Accessibility(UserManagement_Accessibility instance);
    partial void DeleteUserManagement_Accessibility(UserManagement_Accessibility instance);
    partial void InsertUserManagement_AuthorizedPage(UserManagement_AuthorizedPage instance);
    partial void UpdateUserManagement_AuthorizedPage(UserManagement_AuthorizedPage instance);
    partial void DeleteUserManagement_AuthorizedPage(UserManagement_AuthorizedPage instance);
    partial void InsertUserManagement_Function(UserManagement_Function instance);
    partial void UpdateUserManagement_Function(UserManagement_Function instance);
    partial void DeleteUserManagement_Function(UserManagement_Function instance);
    partial void InsertUserManagement_Menu(UserManagement_Menu instance);
    partial void UpdateUserManagement_Menu(UserManagement_Menu instance);
    partial void DeleteUserManagement_Menu(UserManagement_Menu instance);
    partial void InsertUserManagement_PagePath(UserManagement_PagePath instance);
    partial void UpdateUserManagement_PagePath(UserManagement_PagePath instance);
    partial void DeleteUserManagement_PagePath(UserManagement_PagePath instance);
    partial void InsertUserManagement_RoleCategory(UserManagement_RoleCategory instance);
    partial void UpdateUserManagement_RoleCategory(UserManagement_RoleCategory instance);
    partial void DeleteUserManagement_RoleCategory(UserManagement_RoleCategory instance);
    partial void InsertUserManagement_RoleDetail(UserManagement_RoleDetail instance);
    partial void UpdateUserManagement_RoleDetail(UserManagement_RoleDetail instance);
    partial void DeleteUserManagement_RoleDetail(UserManagement_RoleDetail instance);
    partial void InsertCategory_Attitude(Category_Attitude instance);
    partial void UpdateCategory_Attitude(Category_Attitude instance);
    partial void DeleteCategory_Attitude(Category_Attitude instance);
    partial void InsertUserManagement_Authorization(UserManagement_Authorization instance);
    partial void UpdateUserManagement_Authorization(UserManagement_Authorization instance);
    partial void DeleteUserManagement_Authorization(UserManagement_Authorization instance);
    partial void InsertUserManagement_RoleParentsAuthorization(UserManagement_RoleParentsAuthorization instance);
    partial void UpdateUserManagement_RoleParentsAuthorization(UserManagement_RoleParentsAuthorization instance);
    partial void DeleteUserManagement_RoleParentsAuthorization(UserManagement_RoleParentsAuthorization instance);
    partial void InsertSchool_School(School_School instance);
    partial void UpdateSchool_School(School_School instance);
    partial void DeleteSchool_School(School_School instance);
    partial void InsertClass_Schedule(Class_Schedule instance);
    partial void UpdateClass_Schedule(Class_Schedule instance);
    partial void DeleteClass_Schedule(Class_Schedule instance);
    partial void InsertStudent_DetailedTermSubjectMark(Student_DetailedTermSubjectMark instance);
    partial void UpdateStudent_DetailedTermSubjectMark(Student_DetailedTermSubjectMark instance);
    partial void DeleteStudent_DetailedTermSubjectMark(Student_DetailedTermSubjectMark instance);
    partial void InsertMessageToParents_Message(MessageToParents_Message instance);
    partial void UpdateMessageToParents_Message(MessageToParents_Message instance);
    partial void DeleteMessageToParents_Message(MessageToParents_Message instance);
    partial void InsertParentComment_Comment(ParentComment_Comment instance);
    partial void UpdateParentComment_Comment(ParentComment_Comment instance);
    partial void DeleteParentComment_Comment(ParentComment_Comment instance);
    #endregion
		
		public DbEContactBookDataContext() : 
				base(global::EContactBook.DataAccess.Properties.Settings.Default.DbEContactBookConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DbEContactBookDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbEContactBookDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbEContactBookDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbEContactBookDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<aspnet_Application> aspnet_Applications
		{
			get
			{
				return this.GetTable<aspnet_Application>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this.GetTable<aspnet_Path>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationAllUser> aspnet_PersonalizationAllUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationAllUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationPerUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Profile> aspnet_Profiles
		{
			get
			{
				return this.GetTable<aspnet_Profile>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this.GetTable<aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_SchemaVersion> aspnet_SchemaVersions
		{
			get
			{
				return this.GetTable<aspnet_SchemaVersion>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<aspnet_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_WebEvent_Event> aspnet_WebEvent_Events
		{
			get
			{
				return this.GetTable<aspnet_WebEvent_Event>();
			}
		}
		
		public System.Data.Linq.Table<Category_Conduct> Category_Conducts
		{
			get
			{
				return this.GetTable<Category_Conduct>();
			}
		}
		
		public System.Data.Linq.Table<Category_DetailedLearningResult> Category_DetailedLearningResults
		{
			get
			{
				return this.GetTable<Category_DetailedLearningResult>();
			}
		}
		
		public System.Data.Linq.Table<Category_Faculty> Category_Faculties
		{
			get
			{
				return this.GetTable<Category_Faculty>();
			}
		}
		
		public System.Data.Linq.Table<Category_Grade> Category_Grades
		{
			get
			{
				return this.GetTable<Category_Grade>();
			}
		}
		
		public System.Data.Linq.Table<Category_LearningAptitude> Category_LearningAptitudes
		{
			get
			{
				return this.GetTable<Category_LearningAptitude>();
			}
		}
		
		public System.Data.Linq.Table<Category_LearningResult> Category_LearningResults
		{
			get
			{
				return this.GetTable<Category_LearningResult>();
			}
		}
		
		public System.Data.Linq.Table<Category_MarkType> Category_MarkTypes
		{
			get
			{
				return this.GetTable<Category_MarkType>();
			}
		}
		
		public System.Data.Linq.Table<Category_Subject> Category_Subjects
		{
			get
			{
				return this.GetTable<Category_Subject>();
			}
		}
		
		public System.Data.Linq.Table<Category_TeachingPeriod> Category_TeachingPeriods
		{
			get
			{
				return this.GetTable<Category_TeachingPeriod>();
			}
		}
		
		public System.Data.Linq.Table<Class_Class> Class_Classes
		{
			get
			{
				return this.GetTable<Class_Class>();
			}
		}
		
		public System.Data.Linq.Table<Class_FormerTeacher> Class_FormerTeachers
		{
			get
			{
				return this.GetTable<Class_FormerTeacher>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_CommentStatus> Configuration_CommentStatus
		{
			get
			{
				return this.GetTable<Configuration_CommentStatus>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_Configuration> Configuration_Configurations
		{
			get
			{
				return this.GetTable<Configuration_Configuration>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_DayInWeek> Configuration_DayInWeeks
		{
			get
			{
				return this.GetTable<Configuration_DayInWeek>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_District> Configuration_Districts
		{
			get
			{
				return this.GetTable<Configuration_District>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_MessageStatus> Configuration_MessageStatus
		{
			get
			{
				return this.GetTable<Configuration_MessageStatus>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_Province> Configuration_Provinces
		{
			get
			{
				return this.GetTable<Configuration_Province>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_Session> Configuration_Sessions
		{
			get
			{
				return this.GetTable<Configuration_Session>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_Term> Configuration_Terms
		{
			get
			{
				return this.GetTable<Configuration_Term>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_TermsInYear> Configuration_TermsInYears
		{
			get
			{
				return this.GetTable<Configuration_TermsInYear>();
			}
		}
		
		public System.Data.Linq.Table<Configuration_Year> Configuration_Years
		{
			get
			{
				return this.GetTable<Configuration_Year>();
			}
		}
		
		public System.Data.Linq.Table<Student_Absent> Student_Absents
		{
			get
			{
				return this.GetTable<Student_Absent>();
			}
		}
		
		public System.Data.Linq.Table<Student_Activity> Student_Activities
		{
			get
			{
				return this.GetTable<Student_Activity>();
			}
		}
		
		public System.Data.Linq.Table<Student_Student> Student_Students
		{
			get
			{
				return this.GetTable<Student_Student>();
			}
		}
		
		public System.Data.Linq.Table<Student_StudentInClass> Student_StudentInClasses
		{
			get
			{
				return this.GetTable<Student_StudentInClass>();
			}
		}
		
		public System.Data.Linq.Table<Student_TermLearningResult> Student_TermLearningResults
		{
			get
			{
				return this.GetTable<Student_TermLearningResult>();
			}
		}
		
		public System.Data.Linq.Table<Student_TermSubjectMark> Student_TermSubjectMarks
		{
			get
			{
				return this.GetTable<Student_TermSubjectMark>();
			}
		}
		
		public System.Data.Linq.Table<System_Parameter> System_Parameters
		{
			get
			{
				return this.GetTable<System_Parameter>();
			}
		}
		
		public System.Data.Linq.Table<UserManagement_Accessibility> UserManagement_Accessibilities
		{
			get
			{
				return this.GetTable<UserManagement_Accessibility>();
			}
		}
		
		public System.Data.Linq.Table<UserManagement_AuthorizedPage> UserManagement_AuthorizedPages
		{
			get
			{
				return this.GetTable<UserManagement_AuthorizedPage>();
			}
		}
		
		public System.Data.Linq.Table<UserManagement_Function> UserManagement_Functions
		{
			get
			{
				return this.GetTable<UserManagement_Function>();
			}
		}
		
		public System.Data.Linq.Table<UserManagement_Menu> UserManagement_Menus
		{
			get
			{
				return this.GetTable<UserManagement_Menu>();
			}
		}
		
		public System.Data.Linq.Table<UserManagement_PagePath> UserManagement_PagePaths
		{
			get
			{
				return this.GetTable<UserManagement_PagePath>();
			}
		}
		
		public System.Data.Linq.Table<UserManagement_RoleCategory> UserManagement_RoleCategories
		{
			get
			{
				return this.GetTable<UserManagement_RoleCategory>();
			}
		}
		
		public System.Data.Linq.Table<UserManagement_RoleDetail> UserManagement_RoleDetails
		{
			get
			{
				return this.GetTable<UserManagement_RoleDetail>();
			}
		}
		
		public System.Data.Linq.Table<Category_Attitude> Category_Attitudes
		{
			get
			{
				return this.GetTable<Category_Attitude>();
			}
		}
		
		public System.Data.Linq.Table<UserManagement_Authorization> UserManagement_Authorizations
		{
			get
			{
				return this.GetTable<UserManagement_Authorization>();
			}
		}
		
		public System.Data.Linq.Table<UserManagement_RoleParentsAuthorization> UserManagement_RoleParentsAuthorizations
		{
			get
			{
				return this.GetTable<UserManagement_RoleParentsAuthorization>();
			}
		}
		
		public System.Data.Linq.Table<School_School> School_Schools
		{
			get
			{
				return this.GetTable<School_School>();
			}
		}
		
		public System.Data.Linq.Table<Class_Schedule> Class_Schedules
		{
			get
			{
				return this.GetTable<Class_Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Student_DetailedTermSubjectMark> Student_DetailedTermSubjectMarks
		{
			get
			{
				return this.GetTable<Student_DetailedTermSubjectMark>();
			}
		}
		
		public System.Data.Linq.Table<MessageToParents_Message> MessageToParents_Messages
		{
			get
			{
				return this.GetTable<MessageToParents_Message>();
			}
		}
		
		public System.Data.Linq.Table<ParentComment_Comment> ParentComment_Comments
		{
			get
			{
				return this.GetTable<ParentComment_Comment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Applications")]
	public partial class aspnet_Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApplicationName;
		
		private string _LoweredApplicationName;
		
		private System.Guid _ApplicationId;
		
		private string _Description;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships;
		
		private EntitySet<aspnet_Path> _aspnet_Paths;
		
		private EntitySet<aspnet_Role> _aspnet_Roles;
		
		private EntitySet<aspnet_User> _aspnet_Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Application()
		{
			this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
			this._aspnet_Paths = new EntitySet<aspnet_Path>(new Action<aspnet_Path>(this.attach_aspnet_Paths), new Action<aspnet_Path>(this.detach_aspnet_Paths));
			this._aspnet_Roles = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles), new Action<aspnet_Role>(this.detach_aspnet_Roles));
			this._aspnet_Users = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users), new Action<aspnet_User>(this.detach_aspnet_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredApplicationName
		{
			get
			{
				return this._LoweredApplicationName;
			}
			set
			{
				if ((this._LoweredApplicationName != value))
				{
					this.OnLoweredApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredApplicationName = value;
					this.SendPropertyChanged("LoweredApplicationName");
					this.OnLoweredApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Memberships", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this._aspnet_Memberships;
			}
			set
			{
				this._aspnet_Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Paths", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this._aspnet_Paths;
			}
			set
			{
				this._aspnet_Paths.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Roles", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this._aspnet_Roles;
			}
			set
			{
				this._aspnet_Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Users", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_User> aspnet_Users
		{
			get
			{
				return this._aspnet_Users;
			}
			set
			{
				this._aspnet_Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _FullName;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<bool> _Gender;
		
		private string _Phone;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _Address;
		
		private bool _IsDeletable;
		
		private System.Nullable<bool> _IsTeacher;
		
		private System.Nullable<int> _SchoolId;
		
		private System.Nullable<bool> _IsActivated;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIsDeletableChanging(bool value);
    partial void OnIsDeletableChanged();
    partial void OnIsTeacherChanging(System.Nullable<bool> value);
    partial void OnIsTeacherChanged();
    partial void OnSchoolIdChanging(System.Nullable<int> value);
    partial void OnSchoolIdChanged();
    partial void OnIsActivatedChanging(System.Nullable<bool> value);
    partial void OnIsActivatedChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(200)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeletable", DbType="Bit NOT NULL")]
		public bool IsDeletable
		{
			get
			{
				return this._IsDeletable;
			}
			set
			{
				if ((this._IsDeletable != value))
				{
					this.OnIsDeletableChanging(value);
					this.SendPropertyChanging();
					this._IsDeletable = value;
					this.SendPropertyChanged("IsDeletable");
					this.OnIsDeletableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTeacher", DbType="Bit")]
		public System.Nullable<bool> IsTeacher
		{
			get
			{
				return this._IsTeacher;
			}
			set
			{
				if ((this._IsTeacher != value))
				{
					this.OnIsTeacherChanging(value);
					this.SendPropertyChanging();
					this._IsTeacher = value;
					this.SendPropertyChanged("IsTeacher");
					this.OnIsTeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int")]
		public System.Nullable<int> SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActivated", DbType="Bit")]
		public System.Nullable<bool> IsActivated
		{
			get
			{
				return this._IsActivated;
			}
			set
			{
				if ((this._IsActivated != value))
				{
					this.OnIsActivatedChanging(value);
					this.SendPropertyChanging();
					this._IsActivated = value;
					this.SendPropertyChanged("IsActivated");
					this.OnIsActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Memberships.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_aspnet_Membership", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.aspnet_Memberships.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(Nullable<int>);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Paths")]
	public partial class aspnet_Path : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _PathId;
		
		private string _Path;
		
		private string _LoweredPath;
		
		private EntityRef<aspnet_PersonalizationAllUser> _aspnet_PersonalizationAllUser;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnLoweredPathChanging(string value);
    partial void OnLoweredPathChanged();
    #endregion
		
		public aspnet_Path()
		{
			this._aspnet_PersonalizationAllUser = default(EntityRef<aspnet_PersonalizationAllUser>);
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredPath", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredPath
		{
			get
			{
				return this._LoweredPath;
			}
			set
			{
				if ((this._LoweredPath != value))
				{
					this.OnLoweredPathChanging(value);
					this.SendPropertyChanging();
					this._LoweredPath = value;
					this.SendPropertyChanged("LoweredPath");
					this.OnLoweredPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_PersonalizationAllUser", ThisKey="PathId", OtherKey="PathId", IsUnique=true, IsForeignKey=false)]
		public aspnet_PersonalizationAllUser aspnet_PersonalizationAllUser
		{
			get
			{
				return this._aspnet_PersonalizationAllUser.Entity;
			}
			set
			{
				aspnet_PersonalizationAllUser previousValue = this._aspnet_PersonalizationAllUser.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_PersonalizationAllUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_PersonalizationAllUser.Entity = null;
						previousValue.aspnet_Path = null;
					}
					this._aspnet_PersonalizationAllUser.Entity = value;
					if ((value != null))
					{
						value.aspnet_Path = this;
					}
					this.SendPropertyChanged("aspnet_PersonalizationAllUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="PathId", OtherKey="PathId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Paths.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Paths.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_PersonalizationAllUsers")]
	public partial class aspnet_PersonalizationAllUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PathId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationAllUser()
		{
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (this._aspnet_Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationAllUser = null;
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationAllUser = this;
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_PersonalizationPerUser")]
	public partial class aspnet_PersonalizationPerUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _PathId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPathIdChanging(System.Nullable<System.Guid> value);
    partial void OnPathIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationPerUser()
		{
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (this._aspnet_Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Profile")]
	public partial class aspnet_Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _PropertyNames;
		
		private string _PropertyValuesString;
		
		private System.Data.Linq.Binary _PropertyValuesBinary;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPropertyNamesChanging(string value);
    partial void OnPropertyNamesChanged();
    partial void OnPropertyValuesStringChanging(string value);
    partial void OnPropertyValuesStringChanged();
    partial void OnPropertyValuesBinaryChanging(System.Data.Linq.Binary value);
    partial void OnPropertyValuesBinaryChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_Profile()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyNames", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyNames
		{
			get
			{
				return this._PropertyNames;
			}
			set
			{
				if ((this._PropertyNames != value))
				{
					this.OnPropertyNamesChanging(value);
					this.SendPropertyChanging();
					this._PropertyNames = value;
					this.SendPropertyChanged("PropertyNames");
					this.OnPropertyNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValuesString", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyValuesString
		{
			get
			{
				return this._PropertyValuesString;
			}
			set
			{
				if ((this._PropertyValuesString != value))
				{
					this.OnPropertyValuesStringChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesString = value;
					this.SendPropertyChanged("PropertyValuesString");
					this.OnPropertyValuesStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValuesBinary", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PropertyValuesBinary
		{
			get
			{
				return this._PropertyValuesBinary;
			}
			set
			{
				if ((this._PropertyValuesBinary != value))
				{
					this.OnPropertyValuesBinaryChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesBinary = value;
					this.SendPropertyChanged("PropertyValuesBinary");
					this.OnPropertyValuesBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Profile = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Profile = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Roles")]
	public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntityRef<UserManagement_RoleDetail> _UserManagement_RoleDetail;
		
		private EntitySet<UserManagement_Authorization> _UserManagement_Authorizations;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Role()
		{
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._UserManagement_RoleDetail = default(EntityRef<UserManagement_RoleDetail>);
			this._UserManagement_Authorizations = new EntitySet<UserManagement_Authorization>(new Action<UserManagement_Authorization>(this.attach_UserManagement_Authorizations), new Action<UserManagement_Authorization>(this.detach_UserManagement_Authorizations));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_UserManagement_RoleDetail", Storage="_UserManagement_RoleDetail", ThisKey="RoleId", OtherKey="RoleId", IsUnique=true, IsForeignKey=false)]
		public UserManagement_RoleDetail UserManagement_RoleDetail
		{
			get
			{
				return this._UserManagement_RoleDetail.Entity;
			}
			set
			{
				UserManagement_RoleDetail previousValue = this._UserManagement_RoleDetail.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_RoleDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_RoleDetail.Entity = null;
						previousValue.aspnet_Role = null;
					}
					this._UserManagement_RoleDetail.Entity = value;
					if ((value != null))
					{
						value.aspnet_Role = this;
					}
					this.SendPropertyChanged("UserManagement_RoleDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_UserManagement_Authorization", Storage="_UserManagement_Authorizations", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<UserManagement_Authorization> UserManagement_Authorizations
		{
			get
			{
				return this._UserManagement_Authorizations;
			}
			set
			{
				this._UserManagement_Authorizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Roles.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Roles.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
		
		private void attach_UserManagement_Authorizations(UserManagement_Authorization entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_UserManagement_Authorizations(UserManagement_Authorization entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_SchemaVersions")]
	public partial class aspnet_SchemaVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Feature;
		
		private string _CompatibleSchemaVersion;
		
		private bool _IsCurrentVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnCompatibleSchemaVersionChanging(string value);
    partial void OnCompatibleSchemaVersionChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    #endregion
		
		public aspnet_SchemaVersion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompatibleSchemaVersion", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CompatibleSchemaVersion
		{
			get
			{
				return this._CompatibleSchemaVersion;
			}
			set
			{
				if ((this._CompatibleSchemaVersion != value))
				{
					this.OnCompatibleSchemaVersionChanging(value);
					this.SendPropertyChanging();
					this._CompatibleSchemaVersion = value;
					this.SendPropertyChanged("CompatibleSchemaVersion");
					this.OnCompatibleSchemaVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentVersion", DbType="Bit NOT NULL")]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntityRef<aspnet_Profile> _aspnet_Profile;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntitySet<Class_FormerTeacher> _Class_FormerTeachers;
		
		private EntitySet<UserManagement_RoleParentsAuthorization> _UserManagement_RoleParentsAuthorizations;
		
		private EntitySet<Class_Schedule> _Class_Schedules;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_Profile = default(EntityRef<aspnet_Profile>);
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._Class_FormerTeachers = new EntitySet<Class_FormerTeacher>(new Action<Class_FormerTeacher>(this.attach_Class_FormerTeachers), new Action<Class_FormerTeacher>(this.detach_Class_FormerTeachers));
			this._UserManagement_RoleParentsAuthorizations = new EntitySet<UserManagement_RoleParentsAuthorization>(new Action<UserManagement_RoleParentsAuthorization>(this.attach_UserManagement_RoleParentsAuthorizations), new Action<UserManagement_RoleParentsAuthorization>(this.detach_UserManagement_RoleParentsAuthorizations));
			this._Class_Schedules = new EntitySet<Class_Schedule>(new Action<Class_Schedule>(this.attach_Class_Schedules), new Action<Class_Schedule>(this.detach_Class_Schedules));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_Profile", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Profile aspnet_Profile
		{
			get
			{
				return this._aspnet_Profile.Entity;
			}
			set
			{
				aspnet_Profile previousValue = this._aspnet_Profile.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Profile.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Profile.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Class_FormerTeacher", Storage="_Class_FormerTeachers", ThisKey="UserId", OtherKey="TeacherId")]
		public EntitySet<Class_FormerTeacher> Class_FormerTeachers
		{
			get
			{
				return this._Class_FormerTeachers;
			}
			set
			{
				this._Class_FormerTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserManagement_RoleParentsAuthorization", Storage="_UserManagement_RoleParentsAuthorizations", ThisKey="UserId", OtherKey="UserParentId")]
		public EntitySet<UserManagement_RoleParentsAuthorization> UserManagement_RoleParentsAuthorizations
		{
			get
			{
				return this._UserManagement_RoleParentsAuthorizations;
			}
			set
			{
				this._UserManagement_RoleParentsAuthorizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Class_Schedule", Storage="_Class_Schedules", ThisKey="UserId", OtherKey="TeacherId")]
		public EntitySet<Class_Schedule> Class_Schedules
		{
			get
			{
				return this._Class_Schedules;
			}
			set
			{
				this._Class_Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Users.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Users.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Class_FormerTeachers(Class_FormerTeacher entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Class_FormerTeachers(Class_FormerTeacher entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_UserManagement_RoleParentsAuthorizations(UserManagement_RoleParentsAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_UserManagement_RoleParentsAuthorizations(UserManagement_RoleParentsAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_UsersInRoles")]
	public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public aspnet_UsersInRole()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_WebEvent_Events")]
	public partial class aspnet_WebEvent_Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EventId;
		
		private System.DateTime _EventTimeUtc;
		
		private System.DateTime _EventTime;
		
		private string _EventType;
		
		private decimal _EventSequence;
		
		private decimal _EventOccurrence;
		
		private int _EventCode;
		
		private int _EventDetailCode;
		
		private string _Message;
		
		private string _ApplicationPath;
		
		private string _ApplicationVirtualPath;
		
		private string _MachineName;
		
		private string _RequestUrl;
		
		private string _ExceptionType;
		
		private string _Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(string value);
    partial void OnEventIdChanged();
    partial void OnEventTimeUtcChanging(System.DateTime value);
    partial void OnEventTimeUtcChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnEventSequenceChanging(decimal value);
    partial void OnEventSequenceChanged();
    partial void OnEventOccurrenceChanging(decimal value);
    partial void OnEventOccurrenceChanged();
    partial void OnEventCodeChanging(int value);
    partial void OnEventCodeChanged();
    partial void OnEventDetailCodeChanging(int value);
    partial void OnEventDetailCodeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnApplicationPathChanging(string value);
    partial void OnApplicationPathChanged();
    partial void OnApplicationVirtualPathChanging(string value);
    partial void OnApplicationVirtualPathChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnRequestUrlChanging(string value);
    partial void OnRequestUrlChanged();
    partial void OnExceptionTypeChanging(string value);
    partial void OnExceptionTypeChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
		
		public aspnet_WebEvent_Event()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Char(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTimeUtc", DbType="DateTime NOT NULL")]
		public System.DateTime EventTimeUtc
		{
			get
			{
				return this._EventTimeUtc;
			}
			set
			{
				if ((this._EventTimeUtc != value))
				{
					this.OnEventTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._EventTimeUtc = value;
					this.SendPropertyChanged("EventTimeUtc");
					this.OnEventTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventSequence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventSequence
		{
			get
			{
				return this._EventSequence;
			}
			set
			{
				if ((this._EventSequence != value))
				{
					this.OnEventSequenceChanging(value);
					this.SendPropertyChanging();
					this._EventSequence = value;
					this.SendPropertyChanged("EventSequence");
					this.OnEventSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOccurrence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventOccurrence
		{
			get
			{
				return this._EventOccurrence;
			}
			set
			{
				if ((this._EventOccurrence != value))
				{
					this.OnEventOccurrenceChanging(value);
					this.SendPropertyChanging();
					this._EventOccurrence = value;
					this.SendPropertyChanged("EventOccurrence");
					this.OnEventOccurrenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCode", DbType="Int NOT NULL")]
		public int EventCode
		{
			get
			{
				return this._EventCode;
			}
			set
			{
				if ((this._EventCode != value))
				{
					this.OnEventCodeChanging(value);
					this.SendPropertyChanging();
					this._EventCode = value;
					this.SendPropertyChanged("EventCode");
					this.OnEventCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailCode", DbType="Int NOT NULL")]
		public int EventDetailCode
		{
			get
			{
				return this._EventDetailCode;
			}
			set
			{
				if ((this._EventDetailCode != value))
				{
					this.OnEventDetailCodeChanging(value);
					this.SendPropertyChanging();
					this._EventDetailCode = value;
					this.SendPropertyChanged("EventDetailCode");
					this.OnEventDetailCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(1024)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationPath", DbType="NVarChar(256)")]
		public string ApplicationPath
		{
			get
			{
				return this._ApplicationPath;
			}
			set
			{
				if ((this._ApplicationPath != value))
				{
					this.OnApplicationPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationPath = value;
					this.SendPropertyChanged("ApplicationPath");
					this.OnApplicationPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationVirtualPath", DbType="NVarChar(256)")]
		public string ApplicationVirtualPath
		{
			get
			{
				return this._ApplicationVirtualPath;
			}
			set
			{
				if ((this._ApplicationVirtualPath != value))
				{
					this.OnApplicationVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationVirtualPath = value;
					this.SendPropertyChanged("ApplicationVirtualPath");
					this.OnApplicationVirtualPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestUrl", DbType="NVarChar(1024)")]
		public string RequestUrl
		{
			get
			{
				return this._RequestUrl;
			}
			set
			{
				if ((this._RequestUrl != value))
				{
					this.OnRequestUrlChanging(value);
					this.SendPropertyChanging();
					this._RequestUrl = value;
					this.SendPropertyChanged("RequestUrl");
					this.OnRequestUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExceptionType", DbType="NVarChar(256)")]
		public string ExceptionType
		{
			get
			{
				return this._ExceptionType;
			}
			set
			{
				if ((this._ExceptionType != value))
				{
					this.OnExceptionTypeChanging(value);
					this.SendPropertyChanging();
					this._ExceptionType = value;
					this.SendPropertyChanged("ExceptionType");
					this.OnExceptionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_Conduct")]
	public partial class Category_Conduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConductId;
		
		private string _ConductName;
		
		private int _SchoolId;
		
		private EntitySet<Category_DetailedLearningResult> _Category_DetailedLearningResults;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConductIdChanging(int value);
    partial void OnConductIdChanged();
    partial void OnConductNameChanging(string value);
    partial void OnConductNameChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Category_Conduct()
		{
			this._Category_DetailedLearningResults = new EntitySet<Category_DetailedLearningResult>(new Action<Category_DetailedLearningResult>(this.attach_Category_DetailedLearningResults), new Action<Category_DetailedLearningResult>(this.detach_Category_DetailedLearningResults));
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConductId
		{
			get
			{
				return this._ConductId;
			}
			set
			{
				if ((this._ConductId != value))
				{
					this.OnConductIdChanging(value);
					this.SendPropertyChanging();
					this._ConductId = value;
					this.SendPropertyChanged("ConductId");
					this.OnConductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConductName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ConductName
		{
			get
			{
				return this._ConductName;
			}
			set
			{
				if ((this._ConductName != value))
				{
					this.OnConductNameChanging(value);
					this.SendPropertyChanging();
					this._ConductName = value;
					this.SendPropertyChanged("ConductName");
					this.OnConductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Conduct_Category_DetailedLearningResult", Storage="_Category_DetailedLearningResults", ThisKey="ConductId", OtherKey="ConductId")]
		public EntitySet<Category_DetailedLearningResult> Category_DetailedLearningResults
		{
			get
			{
				return this._Category_DetailedLearningResults;
			}
			set
			{
				this._Category_DetailedLearningResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_Conduct", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.Category_Conducts.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.Category_Conducts.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category_DetailedLearningResults(Category_DetailedLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Category_Conduct = this;
		}
		
		private void detach_Category_DetailedLearningResults(Category_DetailedLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Category_Conduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_DetailedLearningResult")]
	public partial class Category_DetailedLearningResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LearningResultId;
		
		private int _LearningAptitudeId;
		
		private int _ConductId;
		
		private EntityRef<Category_Conduct> _Category_Conduct;
		
		private EntityRef<Category_LearningAptitude> _Category_LearningAptitude;
		
		private EntityRef<Category_LearningResult> _Category_LearningResult;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLearningResultIdChanging(int value);
    partial void OnLearningResultIdChanged();
    partial void OnLearningAptitudeIdChanging(int value);
    partial void OnLearningAptitudeIdChanged();
    partial void OnConductIdChanging(int value);
    partial void OnConductIdChanged();
    #endregion
		
		public Category_DetailedLearningResult()
		{
			this._Category_Conduct = default(EntityRef<Category_Conduct>);
			this._Category_LearningAptitude = default(EntityRef<Category_LearningAptitude>);
			this._Category_LearningResult = default(EntityRef<Category_LearningResult>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearningResultId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LearningResultId
		{
			get
			{
				return this._LearningResultId;
			}
			set
			{
				if ((this._LearningResultId != value))
				{
					if (this._Category_LearningResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLearningResultIdChanging(value);
					this.SendPropertyChanging();
					this._LearningResultId = value;
					this.SendPropertyChanged("LearningResultId");
					this.OnLearningResultIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearningAptitudeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LearningAptitudeId
		{
			get
			{
				return this._LearningAptitudeId;
			}
			set
			{
				if ((this._LearningAptitudeId != value))
				{
					if (this._Category_LearningAptitude.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLearningAptitudeIdChanging(value);
					this.SendPropertyChanging();
					this._LearningAptitudeId = value;
					this.SendPropertyChanged("LearningAptitudeId");
					this.OnLearningAptitudeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ConductId
		{
			get
			{
				return this._ConductId;
			}
			set
			{
				if ((this._ConductId != value))
				{
					if (this._Category_Conduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConductIdChanging(value);
					this.SendPropertyChanging();
					this._ConductId = value;
					this.SendPropertyChanged("ConductId");
					this.OnConductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Conduct_Category_DetailedLearningResult", Storage="_Category_Conduct", ThisKey="ConductId", OtherKey="ConductId", IsForeignKey=true)]
		public Category_Conduct Category_Conduct
		{
			get
			{
				return this._Category_Conduct.Entity;
			}
			set
			{
				Category_Conduct previousValue = this._Category_Conduct.Entity;
				if (((previousValue != value) 
							|| (this._Category_Conduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_Conduct.Entity = null;
						previousValue.Category_DetailedLearningResults.Remove(this);
					}
					this._Category_Conduct.Entity = value;
					if ((value != null))
					{
						value.Category_DetailedLearningResults.Add(this);
						this._ConductId = value.ConductId;
					}
					else
					{
						this._ConductId = default(int);
					}
					this.SendPropertyChanged("Category_Conduct");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_LearningAptitude_Category_DetailedLearningResult", Storage="_Category_LearningAptitude", ThisKey="LearningAptitudeId", OtherKey="LearningAptitudeId", IsForeignKey=true)]
		public Category_LearningAptitude Category_LearningAptitude
		{
			get
			{
				return this._Category_LearningAptitude.Entity;
			}
			set
			{
				Category_LearningAptitude previousValue = this._Category_LearningAptitude.Entity;
				if (((previousValue != value) 
							|| (this._Category_LearningAptitude.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_LearningAptitude.Entity = null;
						previousValue.Category_DetailedLearningResults.Remove(this);
					}
					this._Category_LearningAptitude.Entity = value;
					if ((value != null))
					{
						value.Category_DetailedLearningResults.Add(this);
						this._LearningAptitudeId = value.LearningAptitudeId;
					}
					else
					{
						this._LearningAptitudeId = default(int);
					}
					this.SendPropertyChanged("Category_LearningAptitude");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_LearningResult_Category_DetailedLearningResult", Storage="_Category_LearningResult", ThisKey="LearningResultId", OtherKey="LearningResultId", IsForeignKey=true)]
		public Category_LearningResult Category_LearningResult
		{
			get
			{
				return this._Category_LearningResult.Entity;
			}
			set
			{
				Category_LearningResult previousValue = this._Category_LearningResult.Entity;
				if (((previousValue != value) 
							|| (this._Category_LearningResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_LearningResult.Entity = null;
						previousValue.Category_DetailedLearningResults.Remove(this);
					}
					this._Category_LearningResult.Entity = value;
					if ((value != null))
					{
						value.Category_DetailedLearningResults.Add(this);
						this._LearningResultId = value.LearningResultId;
					}
					else
					{
						this._LearningResultId = default(int);
					}
					this.SendPropertyChanged("Category_LearningResult");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_Faculty")]
	public partial class Category_Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FacultyId;
		
		private string _FacultyName;
		
		private string _Description;
		
		private int _SchoolId;
		
		private EntitySet<Category_Subject> _Category_Subjects;
		
		private EntitySet<Class_Class> _Class_Classes;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacultyIdChanging(int value);
    partial void OnFacultyIdChanged();
    partial void OnFacultyNameChanging(string value);
    partial void OnFacultyNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Category_Faculty()
		{
			this._Category_Subjects = new EntitySet<Category_Subject>(new Action<Category_Subject>(this.attach_Category_Subjects), new Action<Category_Subject>(this.detach_Category_Subjects));
			this._Class_Classes = new EntitySet<Class_Class>(new Action<Class_Class>(this.attach_Class_Classes), new Action<Class_Class>(this.detach_Class_Classes));
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FacultyId
		{
			get
			{
				return this._FacultyId;
			}
			set
			{
				if ((this._FacultyId != value))
				{
					this.OnFacultyIdChanging(value);
					this.SendPropertyChanging();
					this._FacultyId = value;
					this.SendPropertyChanged("FacultyId");
					this.OnFacultyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FacultyName
		{
			get
			{
				return this._FacultyName;
			}
			set
			{
				if ((this._FacultyName != value))
				{
					this.OnFacultyNameChanging(value);
					this.SendPropertyChanging();
					this._FacultyName = value;
					this.SendPropertyChanged("FacultyName");
					this.OnFacultyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Faculty_Category_Subject", Storage="_Category_Subjects", ThisKey="FacultyId", OtherKey="FacultyId")]
		public EntitySet<Category_Subject> Category_Subjects
		{
			get
			{
				return this._Category_Subjects;
			}
			set
			{
				this._Category_Subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Faculty_Class_Class", Storage="_Class_Classes", ThisKey="FacultyId", OtherKey="FacultyId")]
		public EntitySet<Class_Class> Class_Classes
		{
			get
			{
				return this._Class_Classes;
			}
			set
			{
				this._Class_Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_Faculty", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.Category_Faculties.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.Category_Faculties.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category_Subjects(Category_Subject entity)
		{
			this.SendPropertyChanging();
			entity.Category_Faculty = this;
		}
		
		private void detach_Category_Subjects(Category_Subject entity)
		{
			this.SendPropertyChanging();
			entity.Category_Faculty = null;
		}
		
		private void attach_Class_Classes(Class_Class entity)
		{
			this.SendPropertyChanging();
			entity.Category_Faculty = this;
		}
		
		private void detach_Class_Classes(Class_Class entity)
		{
			this.SendPropertyChanging();
			entity.Category_Faculty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_Grade")]
	public partial class Category_Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GradeId;
		
		private string _GradeName;
		
		private short _DisplayedOrder;
		
		private int _SchoolId;
		
		private EntitySet<Category_MarkType> _Category_MarkTypes;
		
		private EntitySet<Category_Subject> _Category_Subjects;
		
		private EntitySet<Class_Class> _Class_Classes;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    partial void OnGradeNameChanging(string value);
    partial void OnGradeNameChanged();
    partial void OnDisplayedOrderChanging(short value);
    partial void OnDisplayedOrderChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Category_Grade()
		{
			this._Category_MarkTypes = new EntitySet<Category_MarkType>(new Action<Category_MarkType>(this.attach_Category_MarkTypes), new Action<Category_MarkType>(this.detach_Category_MarkTypes));
			this._Category_Subjects = new EntitySet<Category_Subject>(new Action<Category_Subject>(this.attach_Category_Subjects), new Action<Category_Subject>(this.detach_Category_Subjects));
			this._Class_Classes = new EntitySet<Class_Class>(new Action<Class_Class>(this.attach_Class_Classes), new Action<Class_Class>(this.detach_Class_Classes));
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GradeName
		{
			get
			{
				return this._GradeName;
			}
			set
			{
				if ((this._GradeName != value))
				{
					this.OnGradeNameChanging(value);
					this.SendPropertyChanging();
					this._GradeName = value;
					this.SendPropertyChanged("GradeName");
					this.OnGradeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayedOrder", DbType="SmallInt NOT NULL")]
		public short DisplayedOrder
		{
			get
			{
				return this._DisplayedOrder;
			}
			set
			{
				if ((this._DisplayedOrder != value))
				{
					this.OnDisplayedOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayedOrder = value;
					this.SendPropertyChanged("DisplayedOrder");
					this.OnDisplayedOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Grade_Category_MarkType", Storage="_Category_MarkTypes", ThisKey="GradeId", OtherKey="GradeId")]
		public EntitySet<Category_MarkType> Category_MarkTypes
		{
			get
			{
				return this._Category_MarkTypes;
			}
			set
			{
				this._Category_MarkTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Grade_Category_Subject", Storage="_Category_Subjects", ThisKey="GradeId", OtherKey="GradeId")]
		public EntitySet<Category_Subject> Category_Subjects
		{
			get
			{
				return this._Category_Subjects;
			}
			set
			{
				this._Category_Subjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Grade_Class_Class", Storage="_Class_Classes", ThisKey="GradeId", OtherKey="GradeId")]
		public EntitySet<Class_Class> Class_Classes
		{
			get
			{
				return this._Class_Classes;
			}
			set
			{
				this._Class_Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_Grade", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.Category_Grades.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.Category_Grades.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category_MarkTypes(Category_MarkType entity)
		{
			this.SendPropertyChanging();
			entity.Category_Grade = this;
		}
		
		private void detach_Category_MarkTypes(Category_MarkType entity)
		{
			this.SendPropertyChanging();
			entity.Category_Grade = null;
		}
		
		private void attach_Category_Subjects(Category_Subject entity)
		{
			this.SendPropertyChanging();
			entity.Category_Grade = this;
		}
		
		private void detach_Category_Subjects(Category_Subject entity)
		{
			this.SendPropertyChanging();
			entity.Category_Grade = null;
		}
		
		private void attach_Class_Classes(Class_Class entity)
		{
			this.SendPropertyChanging();
			entity.Category_Grade = this;
		}
		
		private void detach_Class_Classes(Class_Class entity)
		{
			this.SendPropertyChanging();
			entity.Category_Grade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_LearningAptitude")]
	public partial class Category_LearningAptitude : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LearningAptitudeId;
		
		private string _LearningAptitudeName;
		
		private double _BeginAverageMark;
		
		private double _EndAverageMark;
		
		private int _SchoolId;
		
		private EntitySet<Category_DetailedLearningResult> _Category_DetailedLearningResults;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLearningAptitudeIdChanging(int value);
    partial void OnLearningAptitudeIdChanged();
    partial void OnLearningAptitudeNameChanging(string value);
    partial void OnLearningAptitudeNameChanged();
    partial void OnBeginAverageMarkChanging(double value);
    partial void OnBeginAverageMarkChanged();
    partial void OnEndAverageMarkChanging(double value);
    partial void OnEndAverageMarkChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Category_LearningAptitude()
		{
			this._Category_DetailedLearningResults = new EntitySet<Category_DetailedLearningResult>(new Action<Category_DetailedLearningResult>(this.attach_Category_DetailedLearningResults), new Action<Category_DetailedLearningResult>(this.detach_Category_DetailedLearningResults));
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearningAptitudeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LearningAptitudeId
		{
			get
			{
				return this._LearningAptitudeId;
			}
			set
			{
				if ((this._LearningAptitudeId != value))
				{
					this.OnLearningAptitudeIdChanging(value);
					this.SendPropertyChanging();
					this._LearningAptitudeId = value;
					this.SendPropertyChanged("LearningAptitudeId");
					this.OnLearningAptitudeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearningAptitudeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LearningAptitudeName
		{
			get
			{
				return this._LearningAptitudeName;
			}
			set
			{
				if ((this._LearningAptitudeName != value))
				{
					this.OnLearningAptitudeNameChanging(value);
					this.SendPropertyChanging();
					this._LearningAptitudeName = value;
					this.SendPropertyChanged("LearningAptitudeName");
					this.OnLearningAptitudeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginAverageMark", DbType="Float NOT NULL")]
		public double BeginAverageMark
		{
			get
			{
				return this._BeginAverageMark;
			}
			set
			{
				if ((this._BeginAverageMark != value))
				{
					this.OnBeginAverageMarkChanging(value);
					this.SendPropertyChanging();
					this._BeginAverageMark = value;
					this.SendPropertyChanged("BeginAverageMark");
					this.OnBeginAverageMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndAverageMark", DbType="Float NOT NULL")]
		public double EndAverageMark
		{
			get
			{
				return this._EndAverageMark;
			}
			set
			{
				if ((this._EndAverageMark != value))
				{
					this.OnEndAverageMarkChanging(value);
					this.SendPropertyChanging();
					this._EndAverageMark = value;
					this.SendPropertyChanged("EndAverageMark");
					this.OnEndAverageMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_LearningAptitude_Category_DetailedLearningResult", Storage="_Category_DetailedLearningResults", ThisKey="LearningAptitudeId", OtherKey="LearningAptitudeId")]
		public EntitySet<Category_DetailedLearningResult> Category_DetailedLearningResults
		{
			get
			{
				return this._Category_DetailedLearningResults;
			}
			set
			{
				this._Category_DetailedLearningResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_LearningAptitude", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.Category_LearningAptitudes.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.Category_LearningAptitudes.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category_DetailedLearningResults(Category_DetailedLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Category_LearningAptitude = this;
		}
		
		private void detach_Category_DetailedLearningResults(Category_DetailedLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Category_LearningAptitude = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_LearningResult")]
	public partial class Category_LearningResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LearningResultId;
		
		private string _LearningResultName;
		
		private int _SchoolId;
		
		private EntitySet<Category_DetailedLearningResult> _Category_DetailedLearningResults;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLearningResultIdChanging(int value);
    partial void OnLearningResultIdChanged();
    partial void OnLearningResultNameChanging(string value);
    partial void OnLearningResultNameChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Category_LearningResult()
		{
			this._Category_DetailedLearningResults = new EntitySet<Category_DetailedLearningResult>(new Action<Category_DetailedLearningResult>(this.attach_Category_DetailedLearningResults), new Action<Category_DetailedLearningResult>(this.detach_Category_DetailedLearningResults));
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearningResultId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LearningResultId
		{
			get
			{
				return this._LearningResultId;
			}
			set
			{
				if ((this._LearningResultId != value))
				{
					this.OnLearningResultIdChanging(value);
					this.SendPropertyChanging();
					this._LearningResultId = value;
					this.SendPropertyChanged("LearningResultId");
					this.OnLearningResultIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearningResultName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LearningResultName
		{
			get
			{
				return this._LearningResultName;
			}
			set
			{
				if ((this._LearningResultName != value))
				{
					this.OnLearningResultNameChanging(value);
					this.SendPropertyChanging();
					this._LearningResultName = value;
					this.SendPropertyChanged("LearningResultName");
					this.OnLearningResultNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_LearningResult_Category_DetailedLearningResult", Storage="_Category_DetailedLearningResults", ThisKey="LearningResultId", OtherKey="LearningResultId")]
		public EntitySet<Category_DetailedLearningResult> Category_DetailedLearningResults
		{
			get
			{
				return this._Category_DetailedLearningResults;
			}
			set
			{
				this._Category_DetailedLearningResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_LearningResult", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.Category_LearningResults.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.Category_LearningResults.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category_DetailedLearningResults(Category_DetailedLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Category_LearningResult = this;
		}
		
		private void detach_Category_DetailedLearningResults(Category_DetailedLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Category_LearningResult = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_MarkType")]
	public partial class Category_MarkType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MarkTypeId;
		
		private string _MarkTypeName;
		
		private double _MarkRatio;
		
		private short _MaxQuantity;
		
		private bool _IsUsedForCalculatingAvg;
		
		private int _GradeId;
		
		private EntitySet<Student_DetailedTermSubjectMark> _Student_DetailedTermSubjectMarks;
		
		private EntityRef<Category_Grade> _Category_Grade;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMarkTypeIdChanging(int value);
    partial void OnMarkTypeIdChanged();
    partial void OnMarkTypeNameChanging(string value);
    partial void OnMarkTypeNameChanged();
    partial void OnMarkRatioChanging(double value);
    partial void OnMarkRatioChanged();
    partial void OnMaxQuantityChanging(short value);
    partial void OnMaxQuantityChanged();
    partial void OnIsUsedForCalculatingAvgChanging(bool value);
    partial void OnIsUsedForCalculatingAvgChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    #endregion
		
		public Category_MarkType()
		{
			this._Student_DetailedTermSubjectMarks = new EntitySet<Student_DetailedTermSubjectMark>(new Action<Student_DetailedTermSubjectMark>(this.attach_Student_DetailedTermSubjectMarks), new Action<Student_DetailedTermSubjectMark>(this.detach_Student_DetailedTermSubjectMarks));
			this._Category_Grade = default(EntityRef<Category_Grade>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MarkTypeId
		{
			get
			{
				return this._MarkTypeId;
			}
			set
			{
				if ((this._MarkTypeId != value))
				{
					this.OnMarkTypeIdChanging(value);
					this.SendPropertyChanging();
					this._MarkTypeId = value;
					this.SendPropertyChanged("MarkTypeId");
					this.OnMarkTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MarkTypeName
		{
			get
			{
				return this._MarkTypeName;
			}
			set
			{
				if ((this._MarkTypeName != value))
				{
					this.OnMarkTypeNameChanging(value);
					this.SendPropertyChanging();
					this._MarkTypeName = value;
					this.SendPropertyChanged("MarkTypeName");
					this.OnMarkTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkRatio", DbType="Float NOT NULL")]
		public double MarkRatio
		{
			get
			{
				return this._MarkRatio;
			}
			set
			{
				if ((this._MarkRatio != value))
				{
					this.OnMarkRatioChanging(value);
					this.SendPropertyChanging();
					this._MarkRatio = value;
					this.SendPropertyChanged("MarkRatio");
					this.OnMarkRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxQuantity", DbType="SmallInt NOT NULL")]
		public short MaxQuantity
		{
			get
			{
				return this._MaxQuantity;
			}
			set
			{
				if ((this._MaxQuantity != value))
				{
					this.OnMaxQuantityChanging(value);
					this.SendPropertyChanging();
					this._MaxQuantity = value;
					this.SendPropertyChanged("MaxQuantity");
					this.OnMaxQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUsedForCalculatingAvg", DbType="Bit NOT NULL")]
		public bool IsUsedForCalculatingAvg
		{
			get
			{
				return this._IsUsedForCalculatingAvg;
			}
			set
			{
				if ((this._IsUsedForCalculatingAvg != value))
				{
					this.OnIsUsedForCalculatingAvgChanging(value);
					this.SendPropertyChanging();
					this._IsUsedForCalculatingAvg = value;
					this.SendPropertyChanged("IsUsedForCalculatingAvg");
					this.OnIsUsedForCalculatingAvgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL")]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Category_Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_MarkType_Student_DetailedTermSubjectMark", Storage="_Student_DetailedTermSubjectMarks", ThisKey="MarkTypeId", OtherKey="MarkType")]
		public EntitySet<Student_DetailedTermSubjectMark> Student_DetailedTermSubjectMarks
		{
			get
			{
				return this._Student_DetailedTermSubjectMarks;
			}
			set
			{
				this._Student_DetailedTermSubjectMarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Grade_Category_MarkType", Storage="_Category_Grade", ThisKey="GradeId", OtherKey="GradeId", IsForeignKey=true)]
		public Category_Grade Category_Grade
		{
			get
			{
				return this._Category_Grade.Entity;
			}
			set
			{
				Category_Grade previousValue = this._Category_Grade.Entity;
				if (((previousValue != value) 
							|| (this._Category_Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_Grade.Entity = null;
						previousValue.Category_MarkTypes.Remove(this);
					}
					this._Category_Grade.Entity = value;
					if ((value != null))
					{
						value.Category_MarkTypes.Add(this);
						this._GradeId = value.GradeId;
					}
					else
					{
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Category_Grade");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Student_DetailedTermSubjectMarks(Student_DetailedTermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Category_MarkType = this;
		}
		
		private void detach_Student_DetailedTermSubjectMarks(Student_DetailedTermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Category_MarkType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_Subject")]
	public partial class Category_Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectId;
		
		private string _SubjectName;
		
		private int _FacultyId;
		
		private int _GradeId;
		
		private double _MarkRatio;
		
		private EntitySet<Student_TermSubjectMark> _Student_TermSubjectMarks;
		
		private EntitySet<Class_Schedule> _Class_Schedules;
		
		private EntityRef<Category_Grade> _Category_Grade;
		
		private EntityRef<Category_Faculty> _Category_Faculty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    partial void OnFacultyIdChanging(int value);
    partial void OnFacultyIdChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    partial void OnMarkRatioChanging(double value);
    partial void OnMarkRatioChanged();
    #endregion
		
		public Category_Subject()
		{
			this._Student_TermSubjectMarks = new EntitySet<Student_TermSubjectMark>(new Action<Student_TermSubjectMark>(this.attach_Student_TermSubjectMarks), new Action<Student_TermSubjectMark>(this.detach_Student_TermSubjectMarks));
			this._Class_Schedules = new EntitySet<Class_Schedule>(new Action<Class_Schedule>(this.attach_Class_Schedules), new Action<Class_Schedule>(this.detach_Class_Schedules));
			this._Category_Grade = default(EntityRef<Category_Grade>);
			this._Category_Faculty = default(EntityRef<Category_Faculty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyId", DbType="Int NOT NULL")]
		public int FacultyId
		{
			get
			{
				return this._FacultyId;
			}
			set
			{
				if ((this._FacultyId != value))
				{
					if (this._Category_Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIdChanging(value);
					this.SendPropertyChanging();
					this._FacultyId = value;
					this.SendPropertyChanged("FacultyId");
					this.OnFacultyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL")]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Category_Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkRatio", DbType="Float NOT NULL")]
		public double MarkRatio
		{
			get
			{
				return this._MarkRatio;
			}
			set
			{
				if ((this._MarkRatio != value))
				{
					this.OnMarkRatioChanging(value);
					this.SendPropertyChanging();
					this._MarkRatio = value;
					this.SendPropertyChanged("MarkRatio");
					this.OnMarkRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subject_Student_TermSubjectMark", Storage="_Student_TermSubjectMarks", ThisKey="SubjectId", OtherKey="SubjectId")]
		public EntitySet<Student_TermSubjectMark> Student_TermSubjectMarks
		{
			get
			{
				return this._Student_TermSubjectMarks;
			}
			set
			{
				this._Student_TermSubjectMarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subject_Class_Schedule", Storage="_Class_Schedules", ThisKey="SubjectId", OtherKey="SubjectId")]
		public EntitySet<Class_Schedule> Class_Schedules
		{
			get
			{
				return this._Class_Schedules;
			}
			set
			{
				this._Class_Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Grade_Category_Subject", Storage="_Category_Grade", ThisKey="GradeId", OtherKey="GradeId", IsForeignKey=true)]
		public Category_Grade Category_Grade
		{
			get
			{
				return this._Category_Grade.Entity;
			}
			set
			{
				Category_Grade previousValue = this._Category_Grade.Entity;
				if (((previousValue != value) 
							|| (this._Category_Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_Grade.Entity = null;
						previousValue.Category_Subjects.Remove(this);
					}
					this._Category_Grade.Entity = value;
					if ((value != null))
					{
						value.Category_Subjects.Add(this);
						this._GradeId = value.GradeId;
					}
					else
					{
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Category_Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Faculty_Category_Subject", Storage="_Category_Faculty", ThisKey="FacultyId", OtherKey="FacultyId", IsForeignKey=true)]
		public Category_Faculty Category_Faculty
		{
			get
			{
				return this._Category_Faculty.Entity;
			}
			set
			{
				Category_Faculty previousValue = this._Category_Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Category_Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_Faculty.Entity = null;
						previousValue.Category_Subjects.Remove(this);
					}
					this._Category_Faculty.Entity = value;
					if ((value != null))
					{
						value.Category_Subjects.Add(this);
						this._FacultyId = value.FacultyId;
					}
					else
					{
						this._FacultyId = default(int);
					}
					this.SendPropertyChanged("Category_Faculty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Student_TermSubjectMarks(Student_TermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Category_Subject = this;
		}
		
		private void detach_Student_TermSubjectMarks(Student_TermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Category_Subject = null;
		}
		
		private void attach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Category_Subject = this;
		}
		
		private void detach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Category_Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_TeachingPeriod")]
	public partial class Category_TeachingPeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeachingPeriodId;
		
		private string _TeachingPeriodName;
		
		private int _TeachingPeriodOrder;
		
		private System.DateTime _BeginTime;
		
		private System.DateTime _EndTime;
		
		private int _SessionId;
		
		private int _SchoolId;
		
		private EntitySet<Class_Schedule> _Class_Schedules;
		
		private EntityRef<Configuration_Session> _Configuration_Session;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeachingPeriodIdChanging(int value);
    partial void OnTeachingPeriodIdChanged();
    partial void OnTeachingPeriodNameChanging(string value);
    partial void OnTeachingPeriodNameChanged();
    partial void OnTeachingPeriodOrderChanging(int value);
    partial void OnTeachingPeriodOrderChanged();
    partial void OnBeginTimeChanging(System.DateTime value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Category_TeachingPeriod()
		{
			this._Class_Schedules = new EntitySet<Class_Schedule>(new Action<Class_Schedule>(this.attach_Class_Schedules), new Action<Class_Schedule>(this.detach_Class_Schedules));
			this._Configuration_Session = default(EntityRef<Configuration_Session>);
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeachingPeriodId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeachingPeriodId
		{
			get
			{
				return this._TeachingPeriodId;
			}
			set
			{
				if ((this._TeachingPeriodId != value))
				{
					this.OnTeachingPeriodIdChanging(value);
					this.SendPropertyChanging();
					this._TeachingPeriodId = value;
					this.SendPropertyChanged("TeachingPeriodId");
					this.OnTeachingPeriodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeachingPeriodName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TeachingPeriodName
		{
			get
			{
				return this._TeachingPeriodName;
			}
			set
			{
				if ((this._TeachingPeriodName != value))
				{
					this.OnTeachingPeriodNameChanging(value);
					this.SendPropertyChanging();
					this._TeachingPeriodName = value;
					this.SendPropertyChanged("TeachingPeriodName");
					this.OnTeachingPeriodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeachingPeriodOrder", DbType="Int NOT NULL")]
		public int TeachingPeriodOrder
		{
			get
			{
				return this._TeachingPeriodOrder;
			}
			set
			{
				if ((this._TeachingPeriodOrder != value))
				{
					this.OnTeachingPeriodOrderChanging(value);
					this.SendPropertyChanging();
					this._TeachingPeriodOrder = value;
					this.SendPropertyChanged("TeachingPeriodOrder");
					this.OnTeachingPeriodOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginTime", DbType="DateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Configuration_Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_TeachingPeriod_Class_Schedule", Storage="_Class_Schedules", ThisKey="TeachingPeriodId", OtherKey="TeachingPeriodId")]
		public EntitySet<Class_Schedule> Class_Schedules
		{
			get
			{
				return this._Class_Schedules;
			}
			set
			{
				this._Class_Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Session_Category_TeachingPeriod", Storage="_Configuration_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Configuration_Session Configuration_Session
		{
			get
			{
				return this._Configuration_Session.Entity;
			}
			set
			{
				Configuration_Session previousValue = this._Configuration_Session.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Session.Entity = null;
						previousValue.Category_TeachingPeriods.Remove(this);
					}
					this._Configuration_Session.Entity = value;
					if ((value != null))
					{
						value.Category_TeachingPeriods.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Configuration_Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_TeachingPeriod", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.Category_TeachingPeriods.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.Category_TeachingPeriods.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Category_TeachingPeriod = this;
		}
		
		private void detach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Category_TeachingPeriod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class_Class")]
	public partial class Class_Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private string _ClassName;
		
		private int _StudentQuantity;
		
		private int _YearId;
		
		private int _FacultyId;
		
		private int _GradeId;
		
		private int _SchoolId;
		
		private EntitySet<Class_FormerTeacher> _Class_FormerTeachers;
		
		private EntitySet<Student_StudentInClass> _Student_StudentInClasses;
		
		private EntitySet<Class_Schedule> _Class_Schedules;
		
		private EntityRef<Category_Grade> _Category_Grade;
		
		private EntityRef<Category_Faculty> _Category_Faculty;
		
		private EntityRef<Configuration_Year> _Configuration_Year;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnStudentQuantityChanging(int value);
    partial void OnStudentQuantityChanged();
    partial void OnYearIdChanging(int value);
    partial void OnYearIdChanged();
    partial void OnFacultyIdChanging(int value);
    partial void OnFacultyIdChanged();
    partial void OnGradeIdChanging(int value);
    partial void OnGradeIdChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Class_Class()
		{
			this._Class_FormerTeachers = new EntitySet<Class_FormerTeacher>(new Action<Class_FormerTeacher>(this.attach_Class_FormerTeachers), new Action<Class_FormerTeacher>(this.detach_Class_FormerTeachers));
			this._Student_StudentInClasses = new EntitySet<Student_StudentInClass>(new Action<Student_StudentInClass>(this.attach_Student_StudentInClasses), new Action<Student_StudentInClass>(this.detach_Student_StudentInClasses));
			this._Class_Schedules = new EntitySet<Class_Schedule>(new Action<Class_Schedule>(this.attach_Class_Schedules), new Action<Class_Schedule>(this.detach_Class_Schedules));
			this._Category_Grade = default(EntityRef<Category_Grade>);
			this._Category_Faculty = default(EntityRef<Category_Faculty>);
			this._Configuration_Year = default(EntityRef<Configuration_Year>);
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentQuantity", DbType="Int NOT NULL")]
		public int StudentQuantity
		{
			get
			{
				return this._StudentQuantity;
			}
			set
			{
				if ((this._StudentQuantity != value))
				{
					this.OnStudentQuantityChanging(value);
					this.SendPropertyChanging();
					this._StudentQuantity = value;
					this.SendPropertyChanged("StudentQuantity");
					this.OnStudentQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearId", DbType="Int NOT NULL")]
		public int YearId
		{
			get
			{
				return this._YearId;
			}
			set
			{
				if ((this._YearId != value))
				{
					if (this._Configuration_Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIdChanging(value);
					this.SendPropertyChanging();
					this._YearId = value;
					this.SendPropertyChanged("YearId");
					this.OnYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyId", DbType="Int NOT NULL")]
		public int FacultyId
		{
			get
			{
				return this._FacultyId;
			}
			set
			{
				if ((this._FacultyId != value))
				{
					if (this._Category_Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIdChanging(value);
					this.SendPropertyChanging();
					this._FacultyId = value;
					this.SendPropertyChanged("FacultyId");
					this.OnFacultyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeId", DbType="Int NOT NULL")]
		public int GradeId
		{
			get
			{
				return this._GradeId;
			}
			set
			{
				if ((this._GradeId != value))
				{
					if (this._Category_Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIdChanging(value);
					this.SendPropertyChanging();
					this._GradeId = value;
					this.SendPropertyChanged("GradeId");
					this.OnGradeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Class_Class_FormerTeacher", Storage="_Class_FormerTeachers", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Class_FormerTeacher> Class_FormerTeachers
		{
			get
			{
				return this._Class_FormerTeachers;
			}
			set
			{
				this._Class_FormerTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Class_Student_StudentInClass", Storage="_Student_StudentInClasses", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Student_StudentInClass> Student_StudentInClasses
		{
			get
			{
				return this._Student_StudentInClasses;
			}
			set
			{
				this._Student_StudentInClasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Class_Class_Schedule", Storage="_Class_Schedules", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<Class_Schedule> Class_Schedules
		{
			get
			{
				return this._Class_Schedules;
			}
			set
			{
				this._Class_Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Grade_Class_Class", Storage="_Category_Grade", ThisKey="GradeId", OtherKey="GradeId", IsForeignKey=true)]
		public Category_Grade Category_Grade
		{
			get
			{
				return this._Category_Grade.Entity;
			}
			set
			{
				Category_Grade previousValue = this._Category_Grade.Entity;
				if (((previousValue != value) 
							|| (this._Category_Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_Grade.Entity = null;
						previousValue.Class_Classes.Remove(this);
					}
					this._Category_Grade.Entity = value;
					if ((value != null))
					{
						value.Class_Classes.Add(this);
						this._GradeId = value.GradeId;
					}
					else
					{
						this._GradeId = default(int);
					}
					this.SendPropertyChanged("Category_Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Faculty_Class_Class", Storage="_Category_Faculty", ThisKey="FacultyId", OtherKey="FacultyId", IsForeignKey=true)]
		public Category_Faculty Category_Faculty
		{
			get
			{
				return this._Category_Faculty.Entity;
			}
			set
			{
				Category_Faculty previousValue = this._Category_Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Category_Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_Faculty.Entity = null;
						previousValue.Class_Classes.Remove(this);
					}
					this._Category_Faculty.Entity = value;
					if ((value != null))
					{
						value.Class_Classes.Add(this);
						this._FacultyId = value.FacultyId;
					}
					else
					{
						this._FacultyId = default(int);
					}
					this.SendPropertyChanged("Category_Faculty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Year_Class_Class", Storage="_Configuration_Year", ThisKey="YearId", OtherKey="YearId", IsForeignKey=true)]
		public Configuration_Year Configuration_Year
		{
			get
			{
				return this._Configuration_Year.Entity;
			}
			set
			{
				Configuration_Year previousValue = this._Configuration_Year.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Year.Entity = null;
						previousValue.Class_Classes.Remove(this);
					}
					this._Configuration_Year.Entity = value;
					if ((value != null))
					{
						value.Class_Classes.Add(this);
						this._YearId = value.YearId;
					}
					else
					{
						this._YearId = default(int);
					}
					this.SendPropertyChanged("Configuration_Year");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Class_Class", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.Class_Classes.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.Class_Classes.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Class_FormerTeachers(Class_FormerTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Class_Class = this;
		}
		
		private void detach_Class_FormerTeachers(Class_FormerTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Class_Class = null;
		}
		
		private void attach_Student_StudentInClasses(Student_StudentInClass entity)
		{
			this.SendPropertyChanging();
			entity.Class_Class = this;
		}
		
		private void detach_Student_StudentInClasses(Student_StudentInClass entity)
		{
			this.SendPropertyChanging();
			entity.Class_Class = null;
		}
		
		private void attach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Class_Class = this;
		}
		
		private void detach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Class_Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class_FormerTeacher")]
	public partial class Class_FormerTeacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FormerTeacherId;
		
		private int _ClassId;
		
		private System.Guid _TeacherId;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Class_Class> _Class_Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormerTeacherIdChanging(int value);
    partial void OnFormerTeacherIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnTeacherIdChanging(System.Guid value);
    partial void OnTeacherIdChanged();
    #endregion
		
		public Class_FormerTeacher()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Class_Class = default(EntityRef<Class_Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormerTeacherId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FormerTeacherId
		{
			get
			{
				return this._FormerTeacherId;
			}
			set
			{
				if ((this._FormerTeacherId != value))
				{
					this.OnFormerTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._FormerTeacherId = value;
					this.SendPropertyChanged("FormerTeacherId");
					this.OnFormerTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class_Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Class_FormerTeacher", Storage="_aspnet_User", ThisKey="TeacherId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Class_FormerTeachers.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Class_FormerTeachers.Add(this);
						this._TeacherId = value.UserId;
					}
					else
					{
						this._TeacherId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Class_Class_FormerTeacher", Storage="_Class_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class_Class Class_Class
		{
			get
			{
				return this._Class_Class.Entity;
			}
			set
			{
				Class_Class previousValue = this._Class_Class.Entity;
				if (((previousValue != value) 
							|| (this._Class_Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class_Class.Entity = null;
						previousValue.Class_FormerTeachers.Remove(this);
					}
					this._Class_Class.Entity = value;
					if ((value != null))
					{
						value.Class_FormerTeachers.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class_Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_CommentStatus")]
	public partial class Configuration_CommentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentStatusId;
		
		private string _CommentStatusName;
		
		private EntitySet<ParentComment_Comment> _ParentComment_Comments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentStatusIdChanging(int value);
    partial void OnCommentStatusIdChanged();
    partial void OnCommentStatusNameChanging(string value);
    partial void OnCommentStatusNameChanged();
    #endregion
		
		public Configuration_CommentStatus()
		{
			this._ParentComment_Comments = new EntitySet<ParentComment_Comment>(new Action<ParentComment_Comment>(this.attach_ParentComment_Comments), new Action<ParentComment_Comment>(this.detach_ParentComment_Comments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentStatusId
		{
			get
			{
				return this._CommentStatusId;
			}
			set
			{
				if ((this._CommentStatusId != value))
				{
					this.OnCommentStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CommentStatusId = value;
					this.SendPropertyChanged("CommentStatusId");
					this.OnCommentStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentStatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CommentStatusName
		{
			get
			{
				return this._CommentStatusName;
			}
			set
			{
				if ((this._CommentStatusName != value))
				{
					this.OnCommentStatusNameChanging(value);
					this.SendPropertyChanging();
					this._CommentStatusName = value;
					this.SendPropertyChanged("CommentStatusName");
					this.OnCommentStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_CommentStatus_ParentComment_Comment", Storage="_ParentComment_Comments", ThisKey="CommentStatusId", OtherKey="CommentStatusId")]
		public EntitySet<ParentComment_Comment> ParentComment_Comments
		{
			get
			{
				return this._ParentComment_Comments;
			}
			set
			{
				this._ParentComment_Comments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParentComment_Comments(ParentComment_Comment entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_CommentStatus = this;
		}
		
		private void detach_ParentComment_Comments(ParentComment_Comment entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_CommentStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_Configuration")]
	public partial class Configuration_Configuration
	{
		
		private int _CurrentYear;
		
		private int _CurrentTerm;
		
		private System.Nullable<int> _SchoolId;
		
		public Configuration_Configuration()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentYear", DbType="Int NOT NULL")]
		public int CurrentYear
		{
			get
			{
				return this._CurrentYear;
			}
			set
			{
				if ((this._CurrentYear != value))
				{
					this._CurrentYear = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentTerm", DbType="Int NOT NULL")]
		public int CurrentTerm
		{
			get
			{
				return this._CurrentTerm;
			}
			set
			{
				if ((this._CurrentTerm != value))
				{
					this._CurrentTerm = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int")]
		public System.Nullable<int> SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this._SchoolId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_DayInWeek")]
	public partial class Configuration_DayInWeek : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DayInWeekId;
		
		private string _DayInWeekName;
		
		private EntitySet<Class_Schedule> _Class_Schedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDayInWeekIdChanging(int value);
    partial void OnDayInWeekIdChanged();
    partial void OnDayInWeekNameChanging(string value);
    partial void OnDayInWeekNameChanged();
    #endregion
		
		public Configuration_DayInWeek()
		{
			this._Class_Schedules = new EntitySet<Class_Schedule>(new Action<Class_Schedule>(this.attach_Class_Schedules), new Action<Class_Schedule>(this.detach_Class_Schedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayInWeekId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DayInWeekId
		{
			get
			{
				return this._DayInWeekId;
			}
			set
			{
				if ((this._DayInWeekId != value))
				{
					this.OnDayInWeekIdChanging(value);
					this.SendPropertyChanging();
					this._DayInWeekId = value;
					this.SendPropertyChanged("DayInWeekId");
					this.OnDayInWeekIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayInWeekName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string DayInWeekName
		{
			get
			{
				return this._DayInWeekName;
			}
			set
			{
				if ((this._DayInWeekName != value))
				{
					this.OnDayInWeekNameChanging(value);
					this.SendPropertyChanging();
					this._DayInWeekName = value;
					this.SendPropertyChanged("DayInWeekName");
					this.OnDayInWeekNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_DayInWeek_Class_Schedule", Storage="_Class_Schedules", ThisKey="DayInWeekId", OtherKey="DayInWeekId")]
		public EntitySet<Class_Schedule> Class_Schedules
		{
			get
			{
				return this._Class_Schedules;
			}
			set
			{
				this._Class_Schedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_DayInWeek = this;
		}
		
		private void detach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_DayInWeek = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_District")]
	public partial class Configuration_District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DistrictId;
		
		private string _DistrictName;
		
		private int _ProvinceId;
		
		private EntitySet<School_School> _School_Schools;
		
		private EntityRef<Configuration_Province> _Configuration_Province;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictIdChanging(int value);
    partial void OnDistrictIdChanged();
    partial void OnDistrictNameChanging(string value);
    partial void OnDistrictNameChanged();
    partial void OnProvinceIdChanging(int value);
    partial void OnProvinceIdChanged();
    #endregion
		
		public Configuration_District()
		{
			this._School_Schools = new EntitySet<School_School>(new Action<School_School>(this.attach_School_Schools), new Action<School_School>(this.detach_School_Schools));
			this._Configuration_Province = default(EntityRef<Configuration_Province>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string DistrictName
		{
			get
			{
				return this._DistrictName;
			}
			set
			{
				if ((this._DistrictName != value))
				{
					this.OnDistrictNameChanging(value);
					this.SendPropertyChanging();
					this._DistrictName = value;
					this.SendPropertyChanged("DistrictName");
					this.OnDistrictNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceId", DbType="Int NOT NULL")]
		public int ProvinceId
		{
			get
			{
				return this._ProvinceId;
			}
			set
			{
				if ((this._ProvinceId != value))
				{
					if (this._Configuration_Province.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinceId = value;
					this.SendPropertyChanged("ProvinceId");
					this.OnProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_District_School_School", Storage="_School_Schools", ThisKey="DistrictId", OtherKey="DistrictId")]
		public EntitySet<School_School> School_Schools
		{
			get
			{
				return this._School_Schools;
			}
			set
			{
				this._School_Schools.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Province_Configuration_District", Storage="_Configuration_Province", ThisKey="ProvinceId", OtherKey="ProvinceId", IsForeignKey=true)]
		public Configuration_Province Configuration_Province
		{
			get
			{
				return this._Configuration_Province.Entity;
			}
			set
			{
				Configuration_Province previousValue = this._Configuration_Province.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Province.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Province.Entity = null;
						previousValue.Configuration_Districts.Remove(this);
					}
					this._Configuration_Province.Entity = value;
					if ((value != null))
					{
						value.Configuration_Districts.Add(this);
						this._ProvinceId = value.ProvinceId;
					}
					else
					{
						this._ProvinceId = default(int);
					}
					this.SendPropertyChanged("Configuration_Province");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_School_Schools(School_School entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_District = this;
		}
		
		private void detach_School_Schools(School_School entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_MessageStatus")]
	public partial class Configuration_MessageStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageStatusId;
		
		private string _MessageStatusName;
		
		private EntitySet<MessageToParents_Message> _MessageToParents_Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageStatusIdChanging(int value);
    partial void OnMessageStatusIdChanged();
    partial void OnMessageStatusNameChanging(string value);
    partial void OnMessageStatusNameChanged();
    #endregion
		
		public Configuration_MessageStatus()
		{
			this._MessageToParents_Messages = new EntitySet<MessageToParents_Message>(new Action<MessageToParents_Message>(this.attach_MessageToParents_Messages), new Action<MessageToParents_Message>(this.detach_MessageToParents_Messages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageStatusId
		{
			get
			{
				return this._MessageStatusId;
			}
			set
			{
				if ((this._MessageStatusId != value))
				{
					this.OnMessageStatusIdChanging(value);
					this.SendPropertyChanging();
					this._MessageStatusId = value;
					this.SendPropertyChanged("MessageStatusId");
					this.OnMessageStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageStatusName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MessageStatusName
		{
			get
			{
				return this._MessageStatusName;
			}
			set
			{
				if ((this._MessageStatusName != value))
				{
					this.OnMessageStatusNameChanging(value);
					this.SendPropertyChanging();
					this._MessageStatusName = value;
					this.SendPropertyChanged("MessageStatusName");
					this.OnMessageStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_MessageStatus_MessageToParents_Message", Storage="_MessageToParents_Messages", ThisKey="MessageStatusId", OtherKey="MessageStatusId")]
		public EntitySet<MessageToParents_Message> MessageToParents_Messages
		{
			get
			{
				return this._MessageToParents_Messages;
			}
			set
			{
				this._MessageToParents_Messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageToParents_Messages(MessageToParents_Message entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_MessageStatus = this;
		}
		
		private void detach_MessageToParents_Messages(MessageToParents_Message entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_MessageStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_Province")]
	public partial class Configuration_Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvinceId;
		
		private string _ProvinceName;
		
		private EntitySet<Configuration_District> _Configuration_Districts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIdChanging(int value);
    partial void OnProvinceIdChanged();
    partial void OnProvinceNameChanging(string value);
    partial void OnProvinceNameChanged();
    #endregion
		
		public Configuration_Province()
		{
			this._Configuration_Districts = new EntitySet<Configuration_District>(new Action<Configuration_District>(this.attach_Configuration_Districts), new Action<Configuration_District>(this.detach_Configuration_Districts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProvinceId
		{
			get
			{
				return this._ProvinceId;
			}
			set
			{
				if ((this._ProvinceId != value))
				{
					this.OnProvinceIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinceId = value;
					this.SendPropertyChanged("ProvinceId");
					this.OnProvinceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProvinceName
		{
			get
			{
				return this._ProvinceName;
			}
			set
			{
				if ((this._ProvinceName != value))
				{
					this.OnProvinceNameChanging(value);
					this.SendPropertyChanging();
					this._ProvinceName = value;
					this.SendPropertyChanged("ProvinceName");
					this.OnProvinceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Province_Configuration_District", Storage="_Configuration_Districts", ThisKey="ProvinceId", OtherKey="ProvinceId")]
		public EntitySet<Configuration_District> Configuration_Districts
		{
			get
			{
				return this._Configuration_Districts;
			}
			set
			{
				this._Configuration_Districts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Configuration_Districts(Configuration_District entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Province = this;
		}
		
		private void detach_Configuration_Districts(Configuration_District entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Province = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_Session")]
	public partial class Configuration_Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionId;
		
		private string _SessionName;
		
		private EntitySet<Category_TeachingPeriod> _Category_TeachingPeriods;
		
		private EntitySet<Class_Schedule> _Class_Schedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnSessionNameChanging(string value);
    partial void OnSessionNameChanged();
    #endregion
		
		public Configuration_Session()
		{
			this._Category_TeachingPeriods = new EntitySet<Category_TeachingPeriod>(new Action<Category_TeachingPeriod>(this.attach_Category_TeachingPeriods), new Action<Category_TeachingPeriod>(this.detach_Category_TeachingPeriods));
			this._Class_Schedules = new EntitySet<Class_Schedule>(new Action<Class_Schedule>(this.attach_Class_Schedules), new Action<Class_Schedule>(this.detach_Class_Schedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string SessionName
		{
			get
			{
				return this._SessionName;
			}
			set
			{
				if ((this._SessionName != value))
				{
					this.OnSessionNameChanging(value);
					this.SendPropertyChanging();
					this._SessionName = value;
					this.SendPropertyChanged("SessionName");
					this.OnSessionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Session_Category_TeachingPeriod", Storage="_Category_TeachingPeriods", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<Category_TeachingPeriod> Category_TeachingPeriods
		{
			get
			{
				return this._Category_TeachingPeriods;
			}
			set
			{
				this._Category_TeachingPeriods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Session_Class_Schedule", Storage="_Class_Schedules", ThisKey="SessionId", OtherKey="SessionId")]
		public EntitySet<Class_Schedule> Class_Schedules
		{
			get
			{
				return this._Class_Schedules;
			}
			set
			{
				this._Class_Schedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Category_TeachingPeriods(Category_TeachingPeriod entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Session = this;
		}
		
		private void detach_Category_TeachingPeriods(Category_TeachingPeriod entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Session = null;
		}
		
		private void attach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Session = this;
		}
		
		private void detach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_Term")]
	public partial class Configuration_Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TermId;
		
		private string _TermName;
		
		private EntitySet<Configuration_TermsInYear> _Configuration_TermsInYears;
		
		private EntitySet<Student_Absent> _Student_Absents;
		
		private EntitySet<Student_Activity> _Student_Activities;
		
		private EntitySet<Student_TermLearningResult> _Student_TermLearningResults;
		
		private EntitySet<Student_TermSubjectMark> _Student_TermSubjectMarks;
		
		private EntitySet<Class_Schedule> _Class_Schedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnTermNameChanging(string value);
    partial void OnTermNameChanged();
    #endregion
		
		public Configuration_Term()
		{
			this._Configuration_TermsInYears = new EntitySet<Configuration_TermsInYear>(new Action<Configuration_TermsInYear>(this.attach_Configuration_TermsInYears), new Action<Configuration_TermsInYear>(this.detach_Configuration_TermsInYears));
			this._Student_Absents = new EntitySet<Student_Absent>(new Action<Student_Absent>(this.attach_Student_Absents), new Action<Student_Absent>(this.detach_Student_Absents));
			this._Student_Activities = new EntitySet<Student_Activity>(new Action<Student_Activity>(this.attach_Student_Activities), new Action<Student_Activity>(this.detach_Student_Activities));
			this._Student_TermLearningResults = new EntitySet<Student_TermLearningResult>(new Action<Student_TermLearningResult>(this.attach_Student_TermLearningResults), new Action<Student_TermLearningResult>(this.detach_Student_TermLearningResults));
			this._Student_TermSubjectMarks = new EntitySet<Student_TermSubjectMark>(new Action<Student_TermSubjectMark>(this.attach_Student_TermSubjectMarks), new Action<Student_TermSubjectMark>(this.detach_Student_TermSubjectMarks));
			this._Class_Schedules = new EntitySet<Class_Schedule>(new Action<Class_Schedule>(this.attach_Class_Schedules), new Action<Class_Schedule>(this.detach_Class_Schedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TermName
		{
			get
			{
				return this._TermName;
			}
			set
			{
				if ((this._TermName != value))
				{
					this.OnTermNameChanging(value);
					this.SendPropertyChanging();
					this._TermName = value;
					this.SendPropertyChanged("TermName");
					this.OnTermNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Configuration_TermsInYear", Storage="_Configuration_TermsInYears", ThisKey="TermId", OtherKey="TermId")]
		public EntitySet<Configuration_TermsInYear> Configuration_TermsInYears
		{
			get
			{
				return this._Configuration_TermsInYears;
			}
			set
			{
				this._Configuration_TermsInYears.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Student_Absent", Storage="_Student_Absents", ThisKey="TermId", OtherKey="TermId")]
		public EntitySet<Student_Absent> Student_Absents
		{
			get
			{
				return this._Student_Absents;
			}
			set
			{
				this._Student_Absents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Student_Activity", Storage="_Student_Activities", ThisKey="TermId", OtherKey="TermId")]
		public EntitySet<Student_Activity> Student_Activities
		{
			get
			{
				return this._Student_Activities;
			}
			set
			{
				this._Student_Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Student_TermLearningResult", Storage="_Student_TermLearningResults", ThisKey="TermId", OtherKey="TermId")]
		public EntitySet<Student_TermLearningResult> Student_TermLearningResults
		{
			get
			{
				return this._Student_TermLearningResults;
			}
			set
			{
				this._Student_TermLearningResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Student_TermSubjectMark", Storage="_Student_TermSubjectMarks", ThisKey="TermId", OtherKey="TermId")]
		public EntitySet<Student_TermSubjectMark> Student_TermSubjectMarks
		{
			get
			{
				return this._Student_TermSubjectMarks;
			}
			set
			{
				this._Student_TermSubjectMarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Class_Schedule", Storage="_Class_Schedules", ThisKey="TermId", OtherKey="TermId")]
		public EntitySet<Class_Schedule> Class_Schedules
		{
			get
			{
				return this._Class_Schedules;
			}
			set
			{
				this._Class_Schedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Configuration_TermsInYears(Configuration_TermsInYear entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = this;
		}
		
		private void detach_Configuration_TermsInYears(Configuration_TermsInYear entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = null;
		}
		
		private void attach_Student_Absents(Student_Absent entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = this;
		}
		
		private void detach_Student_Absents(Student_Absent entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = null;
		}
		
		private void attach_Student_Activities(Student_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = this;
		}
		
		private void detach_Student_Activities(Student_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = null;
		}
		
		private void attach_Student_TermLearningResults(Student_TermLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = this;
		}
		
		private void detach_Student_TermLearningResults(Student_TermLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = null;
		}
		
		private void attach_Student_TermSubjectMarks(Student_TermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = this;
		}
		
		private void detach_Student_TermSubjectMarks(Student_TermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = null;
		}
		
		private void attach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = this;
		}
		
		private void detach_Class_Schedules(Class_Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Term = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_TermsInYear")]
	public partial class Configuration_TermsInYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _YearId;
		
		private int _TermId;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private EntityRef<Configuration_Term> _Configuration_Term;
		
		private EntityRef<Configuration_Year> _Configuration_Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearIdChanging(int value);
    partial void OnYearIdChanged();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    #endregion
		
		public Configuration_TermsInYear()
		{
			this._Configuration_Term = default(EntityRef<Configuration_Term>);
			this._Configuration_Year = default(EntityRef<Configuration_Year>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int YearId
		{
			get
			{
				return this._YearId;
			}
			set
			{
				if ((this._YearId != value))
				{
					if (this._Configuration_Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIdChanging(value);
					this.SendPropertyChanging();
					this._YearId = value;
					this.SendPropertyChanged("YearId");
					this.OnYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._Configuration_Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Configuration_TermsInYear", Storage="_Configuration_Term", ThisKey="TermId", OtherKey="TermId", IsForeignKey=true)]
		public Configuration_Term Configuration_Term
		{
			get
			{
				return this._Configuration_Term.Entity;
			}
			set
			{
				Configuration_Term previousValue = this._Configuration_Term.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Term.Entity = null;
						previousValue.Configuration_TermsInYears.Remove(this);
					}
					this._Configuration_Term.Entity = value;
					if ((value != null))
					{
						value.Configuration_TermsInYears.Add(this);
						this._TermId = value.TermId;
					}
					else
					{
						this._TermId = default(int);
					}
					this.SendPropertyChanged("Configuration_Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Year_Configuration_TermsInYear", Storage="_Configuration_Year", ThisKey="YearId", OtherKey="YearId", IsForeignKey=true)]
		public Configuration_Year Configuration_Year
		{
			get
			{
				return this._Configuration_Year.Entity;
			}
			set
			{
				Configuration_Year previousValue = this._Configuration_Year.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Year.Entity = null;
						previousValue.Configuration_TermsInYears.Remove(this);
					}
					this._Configuration_Year.Entity = value;
					if ((value != null))
					{
						value.Configuration_TermsInYears.Add(this);
						this._YearId = value.YearId;
					}
					else
					{
						this._YearId = default(int);
					}
					this.SendPropertyChanged("Configuration_Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration_Year")]
	public partial class Configuration_Year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _YearId;
		
		private string _YearName;
		
		private System.DateTime _BeginFirstTermDate;
		
		private System.DateTime _EndFirstTermDate;
		
		private System.DateTime _BeginSecondTermDate;
		
		private System.DateTime _EndSecondTermDate;
		
		private int _SchoolId;
		
		private EntitySet<Class_Class> _Class_Classes;
		
		private EntitySet<Configuration_TermsInYear> _Configuration_TermsInYears;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYearIdChanging(int value);
    partial void OnYearIdChanged();
    partial void OnYearNameChanging(string value);
    partial void OnYearNameChanged();
    partial void OnBeginFirstTermDateChanging(System.DateTime value);
    partial void OnBeginFirstTermDateChanged();
    partial void OnEndFirstTermDateChanging(System.DateTime value);
    partial void OnEndFirstTermDateChanged();
    partial void OnBeginSecondTermDateChanging(System.DateTime value);
    partial void OnBeginSecondTermDateChanged();
    partial void OnEndSecondTermDateChanging(System.DateTime value);
    partial void OnEndSecondTermDateChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Configuration_Year()
		{
			this._Class_Classes = new EntitySet<Class_Class>(new Action<Class_Class>(this.attach_Class_Classes), new Action<Class_Class>(this.detach_Class_Classes));
			this._Configuration_TermsInYears = new EntitySet<Configuration_TermsInYear>(new Action<Configuration_TermsInYear>(this.attach_Configuration_TermsInYears), new Action<Configuration_TermsInYear>(this.detach_Configuration_TermsInYears));
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int YearId
		{
			get
			{
				return this._YearId;
			}
			set
			{
				if ((this._YearId != value))
				{
					this.OnYearIdChanging(value);
					this.SendPropertyChanging();
					this._YearId = value;
					this.SendPropertyChanged("YearId");
					this.OnYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string YearName
		{
			get
			{
				return this._YearName;
			}
			set
			{
				if ((this._YearName != value))
				{
					this.OnYearNameChanging(value);
					this.SendPropertyChanging();
					this._YearName = value;
					this.SendPropertyChanged("YearName");
					this.OnYearNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginFirstTermDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginFirstTermDate
		{
			get
			{
				return this._BeginFirstTermDate;
			}
			set
			{
				if ((this._BeginFirstTermDate != value))
				{
					this.OnBeginFirstTermDateChanging(value);
					this.SendPropertyChanging();
					this._BeginFirstTermDate = value;
					this.SendPropertyChanged("BeginFirstTermDate");
					this.OnBeginFirstTermDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndFirstTermDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndFirstTermDate
		{
			get
			{
				return this._EndFirstTermDate;
			}
			set
			{
				if ((this._EndFirstTermDate != value))
				{
					this.OnEndFirstTermDateChanging(value);
					this.SendPropertyChanging();
					this._EndFirstTermDate = value;
					this.SendPropertyChanged("EndFirstTermDate");
					this.OnEndFirstTermDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginSecondTermDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginSecondTermDate
		{
			get
			{
				return this._BeginSecondTermDate;
			}
			set
			{
				if ((this._BeginSecondTermDate != value))
				{
					this.OnBeginSecondTermDateChanging(value);
					this.SendPropertyChanging();
					this._BeginSecondTermDate = value;
					this.SendPropertyChanged("BeginSecondTermDate");
					this.OnBeginSecondTermDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndSecondTermDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndSecondTermDate
		{
			get
			{
				return this._EndSecondTermDate;
			}
			set
			{
				if ((this._EndSecondTermDate != value))
				{
					this.OnEndSecondTermDateChanging(value);
					this.SendPropertyChanging();
					this._EndSecondTermDate = value;
					this.SendPropertyChanged("EndSecondTermDate");
					this.OnEndSecondTermDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Year_Class_Class", Storage="_Class_Classes", ThisKey="YearId", OtherKey="YearId")]
		public EntitySet<Class_Class> Class_Classes
		{
			get
			{
				return this._Class_Classes;
			}
			set
			{
				this._Class_Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Year_Configuration_TermsInYear", Storage="_Configuration_TermsInYears", ThisKey="YearId", OtherKey="YearId")]
		public EntitySet<Configuration_TermsInYear> Configuration_TermsInYears
		{
			get
			{
				return this._Configuration_TermsInYears;
			}
			set
			{
				this._Configuration_TermsInYears.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Configuration_Year", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.Configuration_Years.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.Configuration_Years.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Class_Classes(Class_Class entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Year = this;
		}
		
		private void detach_Class_Classes(Class_Class entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Year = null;
		}
		
		private void attach_Configuration_TermsInYears(Configuration_TermsInYear entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Year = this;
		}
		
		private void detach_Configuration_TermsInYears(Configuration_TermsInYear entity)
		{
			this.SendPropertyChanging();
			entity.Configuration_Year = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_Absent")]
	public partial class Student_Absent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbsentId;
		
		private System.DateTime _Date;
		
		private int _SessionId;
		
		private bool _IsAsked;
		
		private string _Reason;
		
		private bool _IsConfirmed;
		
		private int _StudentInClass;
		
		private int _TermId;
		
		private EntityRef<Configuration_Term> _Configuration_Term;
		
		private EntityRef<Student_StudentInClass> _Student_StudentInClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbsentIdChanging(int value);
    partial void OnAbsentIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnIsAskedChanging(bool value);
    partial void OnIsAskedChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnIsConfirmedChanging(bool value);
    partial void OnIsConfirmedChanged();
    partial void OnStudentInClassChanging(int value);
    partial void OnStudentInClassChanged();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    #endregion
		
		public Student_Absent()
		{
			this._Configuration_Term = default(EntityRef<Configuration_Term>);
			this._Student_StudentInClass = default(EntityRef<Student_StudentInClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbsentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbsentId
		{
			get
			{
				return this._AbsentId;
			}
			set
			{
				if ((this._AbsentId != value))
				{
					this.OnAbsentIdChanging(value);
					this.SendPropertyChanging();
					this._AbsentId = value;
					this.SendPropertyChanged("AbsentId");
					this.OnAbsentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAsked", DbType="Bit NOT NULL")]
		public bool IsAsked
		{
			get
			{
				return this._IsAsked;
			}
			set
			{
				if ((this._IsAsked != value))
				{
					this.OnIsAskedChanging(value);
					this.SendPropertyChanging();
					this._IsAsked = value;
					this.SendPropertyChanged("IsAsked");
					this.OnIsAskedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(300)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConfirmed", DbType="Bit NOT NULL")]
		public bool IsConfirmed
		{
			get
			{
				return this._IsConfirmed;
			}
			set
			{
				if ((this._IsConfirmed != value))
				{
					this.OnIsConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsConfirmed = value;
					this.SendPropertyChanged("IsConfirmed");
					this.OnIsConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentInClass", DbType="Int NOT NULL")]
		public int StudentInClass
		{
			get
			{
				return this._StudentInClass;
			}
			set
			{
				if ((this._StudentInClass != value))
				{
					if (this._Student_StudentInClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentInClassChanging(value);
					this.SendPropertyChanging();
					this._StudentInClass = value;
					this.SendPropertyChanged("StudentInClass");
					this.OnStudentInClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL")]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._Configuration_Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Student_Absent", Storage="_Configuration_Term", ThisKey="TermId", OtherKey="TermId", IsForeignKey=true)]
		public Configuration_Term Configuration_Term
		{
			get
			{
				return this._Configuration_Term.Entity;
			}
			set
			{
				Configuration_Term previousValue = this._Configuration_Term.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Term.Entity = null;
						previousValue.Student_Absents.Remove(this);
					}
					this._Configuration_Term.Entity = value;
					if ((value != null))
					{
						value.Student_Absents.Add(this);
						this._TermId = value.TermId;
					}
					else
					{
						this._TermId = default(int);
					}
					this.SendPropertyChanged("Configuration_Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_Student_Absent", Storage="_Student_StudentInClass", ThisKey="StudentInClass", OtherKey="StudentInClassId", IsForeignKey=true)]
		public Student_StudentInClass Student_StudentInClass
		{
			get
			{
				return this._Student_StudentInClass.Entity;
			}
			set
			{
				Student_StudentInClass previousValue = this._Student_StudentInClass.Entity;
				if (((previousValue != value) 
							|| (this._Student_StudentInClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student_StudentInClass.Entity = null;
						previousValue.Student_Absents.Remove(this);
					}
					this._Student_StudentInClass.Entity = value;
					if ((value != null))
					{
						value.Student_Absents.Add(this);
						this._StudentInClass = value.StudentInClassId;
					}
					else
					{
						this._StudentInClass = default(int);
					}
					this.SendPropertyChanged("Student_StudentInClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_Activity")]
	public partial class Student_Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActivityId;
		
		private string _Title;
		
		private string _ActivityContent;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _AttitudeId;
		
		private int _StudentInClassId;
		
		private int _TermId;
		
		private EntityRef<Configuration_Term> _Configuration_Term;
		
		private EntityRef<Student_StudentInClass> _Student_StudentInClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIdChanging(int value);
    partial void OnActivityIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnActivityContentChanging(string value);
    partial void OnActivityContentChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAttitudeIdChanging(System.Nullable<int> value);
    partial void OnAttitudeIdChanged();
    partial void OnStudentInClassIdChanging(int value);
    partial void OnStudentInClassIdChanged();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    #endregion
		
		public Student_Activity()
		{
			this._Configuration_Term = default(EntityRef<Configuration_Term>);
			this._Student_StudentInClass = default(EntityRef<Student_StudentInClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityContent", DbType="NChar(300)")]
		public string ActivityContent
		{
			get
			{
				return this._ActivityContent;
			}
			set
			{
				if ((this._ActivityContent != value))
				{
					this.OnActivityContentChanging(value);
					this.SendPropertyChanging();
					this._ActivityContent = value;
					this.SendPropertyChanged("ActivityContent");
					this.OnActivityContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttitudeId", DbType="Int")]
		public System.Nullable<int> AttitudeId
		{
			get
			{
				return this._AttitudeId;
			}
			set
			{
				if ((this._AttitudeId != value))
				{
					this.OnAttitudeIdChanging(value);
					this.SendPropertyChanging();
					this._AttitudeId = value;
					this.SendPropertyChanged("AttitudeId");
					this.OnAttitudeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentInClassId", DbType="Int NOT NULL")]
		public int StudentInClassId
		{
			get
			{
				return this._StudentInClassId;
			}
			set
			{
				if ((this._StudentInClassId != value))
				{
					if (this._Student_StudentInClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentInClassIdChanging(value);
					this.SendPropertyChanging();
					this._StudentInClassId = value;
					this.SendPropertyChanged("StudentInClassId");
					this.OnStudentInClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL")]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._Configuration_Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Student_Activity", Storage="_Configuration_Term", ThisKey="TermId", OtherKey="TermId", IsForeignKey=true)]
		public Configuration_Term Configuration_Term
		{
			get
			{
				return this._Configuration_Term.Entity;
			}
			set
			{
				Configuration_Term previousValue = this._Configuration_Term.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Term.Entity = null;
						previousValue.Student_Activities.Remove(this);
					}
					this._Configuration_Term.Entity = value;
					if ((value != null))
					{
						value.Student_Activities.Add(this);
						this._TermId = value.TermId;
					}
					else
					{
						this._TermId = default(int);
					}
					this.SendPropertyChanged("Configuration_Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_Student_Activity", Storage="_Student_StudentInClass", ThisKey="StudentInClassId", OtherKey="StudentInClassId", IsForeignKey=true)]
		public Student_StudentInClass Student_StudentInClass
		{
			get
			{
				return this._Student_StudentInClass.Entity;
			}
			set
			{
				Student_StudentInClass previousValue = this._Student_StudentInClass.Entity;
				if (((previousValue != value) 
							|| (this._Student_StudentInClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student_StudentInClass.Entity = null;
						previousValue.Student_Activities.Remove(this);
					}
					this._Student_StudentInClass.Entity = value;
					if ((value != null))
					{
						value.Student_Activities.Add(this);
						this._StudentInClassId = value.StudentInClassId;
					}
					else
					{
						this._StudentInClassId = default(int);
					}
					this.SendPropertyChanged("Student_StudentInClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_Student")]
	public partial class Student_Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentId;
		
		private string _StudentCode;
		
		private string _FullName;
		
		private System.DateTime _StudentBirthday;
		
		private bool _Gender;
		
		private string _Birthplace;
		
		private string _Address;
		
		private string _ContactPhone;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _FatherName;
		
		private System.Nullable<System.DateTime> _FatherBirthday;
		
		private string _FatherJob;
		
		private string _MotherName;
		
		private System.Nullable<System.DateTime> _MotherBirthday;
		
		private string _MotherJob;
		
		private string _PatronName;
		
		private System.Nullable<System.DateTime> _PatronBirthday;
		
		private string _PatronJob;
		
		private int _SchoolId;
		
		private EntitySet<Student_StudentInClass> _Student_StudentInClasses;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnStudentCodeChanging(string value);
    partial void OnStudentCodeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnStudentBirthdayChanging(System.DateTime value);
    partial void OnStudentBirthdayChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnBirthplaceChanging(string value);
    partial void OnBirthplaceChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnFatherNameChanging(string value);
    partial void OnFatherNameChanged();
    partial void OnFatherBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnFatherBirthdayChanged();
    partial void OnFatherJobChanging(string value);
    partial void OnFatherJobChanged();
    partial void OnMotherNameChanging(string value);
    partial void OnMotherNameChanged();
    partial void OnMotherBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnMotherBirthdayChanged();
    partial void OnMotherJobChanging(string value);
    partial void OnMotherJobChanged();
    partial void OnPatronNameChanging(string value);
    partial void OnPatronNameChanged();
    partial void OnPatronBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnPatronBirthdayChanged();
    partial void OnPatronJobChanging(string value);
    partial void OnPatronJobChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public Student_Student()
		{
			this._Student_StudentInClasses = new EntitySet<Student_StudentInClass>(new Action<Student_StudentInClass>(this.attach_Student_StudentInClasses), new Action<Student_StudentInClass>(this.detach_Student_StudentInClasses));
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string StudentCode
		{
			get
			{
				return this._StudentCode;
			}
			set
			{
				if ((this._StudentCode != value))
				{
					this.OnStudentCodeChanging(value);
					this.SendPropertyChanging();
					this._StudentCode = value;
					this.SendPropertyChanged("StudentCode");
					this.OnStudentCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentBirthday", DbType="DateTime NOT NULL")]
		public System.DateTime StudentBirthday
		{
			get
			{
				return this._StudentBirthday;
			}
			set
			{
				if ((this._StudentBirthday != value))
				{
					this.OnStudentBirthdayChanging(value);
					this.SendPropertyChanging();
					this._StudentBirthday = value;
					this.SendPropertyChanged("StudentBirthday");
					this.OnStudentBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthplace", DbType="NVarChar(200)")]
		public string Birthplace
		{
			get
			{
				return this._Birthplace;
			}
			set
			{
				if ((this._Birthplace != value))
				{
					this.OnBirthplaceChanging(value);
					this.SendPropertyChanging();
					this._Birthplace = value;
					this.SendPropertyChanged("Birthplace");
					this.OnBirthplaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="NVarChar(20)")]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherName", DbType="NVarChar(100)")]
		public string FatherName
		{
			get
			{
				return this._FatherName;
			}
			set
			{
				if ((this._FatherName != value))
				{
					this.OnFatherNameChanging(value);
					this.SendPropertyChanging();
					this._FatherName = value;
					this.SendPropertyChanged("FatherName");
					this.OnFatherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherBirthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> FatherBirthday
		{
			get
			{
				return this._FatherBirthday;
			}
			set
			{
				if ((this._FatherBirthday != value))
				{
					this.OnFatherBirthdayChanging(value);
					this.SendPropertyChanging();
					this._FatherBirthday = value;
					this.SendPropertyChanged("FatherBirthday");
					this.OnFatherBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FatherJob", DbType="NVarChar(100)")]
		public string FatherJob
		{
			get
			{
				return this._FatherJob;
			}
			set
			{
				if ((this._FatherJob != value))
				{
					this.OnFatherJobChanging(value);
					this.SendPropertyChanging();
					this._FatherJob = value;
					this.SendPropertyChanged("FatherJob");
					this.OnFatherJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherName", DbType="NVarChar(100)")]
		public string MotherName
		{
			get
			{
				return this._MotherName;
			}
			set
			{
				if ((this._MotherName != value))
				{
					this.OnMotherNameChanging(value);
					this.SendPropertyChanging();
					this._MotherName = value;
					this.SendPropertyChanged("MotherName");
					this.OnMotherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherBirthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> MotherBirthday
		{
			get
			{
				return this._MotherBirthday;
			}
			set
			{
				if ((this._MotherBirthday != value))
				{
					this.OnMotherBirthdayChanging(value);
					this.SendPropertyChanging();
					this._MotherBirthday = value;
					this.SendPropertyChanged("MotherBirthday");
					this.OnMotherBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotherJob", DbType="NVarChar(100)")]
		public string MotherJob
		{
			get
			{
				return this._MotherJob;
			}
			set
			{
				if ((this._MotherJob != value))
				{
					this.OnMotherJobChanging(value);
					this.SendPropertyChanging();
					this._MotherJob = value;
					this.SendPropertyChanged("MotherJob");
					this.OnMotherJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronName", DbType="NVarChar(100)")]
		public string PatronName
		{
			get
			{
				return this._PatronName;
			}
			set
			{
				if ((this._PatronName != value))
				{
					this.OnPatronNameChanging(value);
					this.SendPropertyChanging();
					this._PatronName = value;
					this.SendPropertyChanged("PatronName");
					this.OnPatronNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronBirthday", DbType="DateTime")]
		public System.Nullable<System.DateTime> PatronBirthday
		{
			get
			{
				return this._PatronBirthday;
			}
			set
			{
				if ((this._PatronBirthday != value))
				{
					this.OnPatronBirthdayChanging(value);
					this.SendPropertyChanging();
					this._PatronBirthday = value;
					this.SendPropertyChanged("PatronBirthday");
					this.OnPatronBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatronJob", DbType="NVarChar(100)")]
		public string PatronJob
		{
			get
			{
				return this._PatronJob;
			}
			set
			{
				if ((this._PatronJob != value))
				{
					this.OnPatronJobChanging(value);
					this.SendPropertyChanging();
					this._PatronJob = value;
					this.SendPropertyChanged("PatronJob");
					this.OnPatronJobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student_Student_StudentInClass", Storage="_Student_StudentInClasses", ThisKey="StudentId", OtherKey="StudentId")]
		public EntitySet<Student_StudentInClass> Student_StudentInClasses
		{
			get
			{
				return this._Student_StudentInClasses;
			}
			set
			{
				this._Student_StudentInClasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Student_Student", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.Student_Students.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.Student_Students.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Student_StudentInClasses(Student_StudentInClass entity)
		{
			this.SendPropertyChanging();
			entity.Student_Student = this;
		}
		
		private void detach_Student_StudentInClasses(Student_StudentInClass entity)
		{
			this.SendPropertyChanging();
			entity.Student_Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_StudentInClass")]
	public partial class Student_StudentInClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentInClassId;
		
		private int _StudentId;
		
		private int _ClassId;
		
		private EntitySet<Student_Absent> _Student_Absents;
		
		private EntitySet<Student_Activity> _Student_Activities;
		
		private EntitySet<Student_TermLearningResult> _Student_TermLearningResults;
		
		private EntitySet<Student_TermSubjectMark> _Student_TermSubjectMarks;
		
		private EntitySet<MessageToParents_Message> _MessageToParents_Messages;
		
		private EntitySet<ParentComment_Comment> _ParentComment_Comments;
		
		private EntityRef<Class_Class> _Class_Class;
		
		private EntityRef<Student_Student> _Student_Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentInClassIdChanging(int value);
    partial void OnStudentInClassIdChanged();
    partial void OnStudentIdChanging(int value);
    partial void OnStudentIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    #endregion
		
		public Student_StudentInClass()
		{
			this._Student_Absents = new EntitySet<Student_Absent>(new Action<Student_Absent>(this.attach_Student_Absents), new Action<Student_Absent>(this.detach_Student_Absents));
			this._Student_Activities = new EntitySet<Student_Activity>(new Action<Student_Activity>(this.attach_Student_Activities), new Action<Student_Activity>(this.detach_Student_Activities));
			this._Student_TermLearningResults = new EntitySet<Student_TermLearningResult>(new Action<Student_TermLearningResult>(this.attach_Student_TermLearningResults), new Action<Student_TermLearningResult>(this.detach_Student_TermLearningResults));
			this._Student_TermSubjectMarks = new EntitySet<Student_TermSubjectMark>(new Action<Student_TermSubjectMark>(this.attach_Student_TermSubjectMarks), new Action<Student_TermSubjectMark>(this.detach_Student_TermSubjectMarks));
			this._MessageToParents_Messages = new EntitySet<MessageToParents_Message>(new Action<MessageToParents_Message>(this.attach_MessageToParents_Messages), new Action<MessageToParents_Message>(this.detach_MessageToParents_Messages));
			this._ParentComment_Comments = new EntitySet<ParentComment_Comment>(new Action<ParentComment_Comment>(this.attach_ParentComment_Comments), new Action<ParentComment_Comment>(this.detach_ParentComment_Comments));
			this._Class_Class = default(EntityRef<Class_Class>);
			this._Student_Student = default(EntityRef<Student_Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentInClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentInClassId
		{
			get
			{
				return this._StudentInClassId;
			}
			set
			{
				if ((this._StudentInClassId != value))
				{
					this.OnStudentInClassIdChanging(value);
					this.SendPropertyChanging();
					this._StudentInClassId = value;
					this.SendPropertyChanged("StudentInClassId");
					this.OnStudentInClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="Int NOT NULL")]
		public int StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student_Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class_Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_Student_Absent", Storage="_Student_Absents", ThisKey="StudentInClassId", OtherKey="StudentInClass")]
		public EntitySet<Student_Absent> Student_Absents
		{
			get
			{
				return this._Student_Absents;
			}
			set
			{
				this._Student_Absents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_Student_Activity", Storage="_Student_Activities", ThisKey="StudentInClassId", OtherKey="StudentInClassId")]
		public EntitySet<Student_Activity> Student_Activities
		{
			get
			{
				return this._Student_Activities;
			}
			set
			{
				this._Student_Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_Student_TermLearningResult", Storage="_Student_TermLearningResults", ThisKey="StudentInClassId", OtherKey="StudentInClassId")]
		public EntitySet<Student_TermLearningResult> Student_TermLearningResults
		{
			get
			{
				return this._Student_TermLearningResults;
			}
			set
			{
				this._Student_TermLearningResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_Student_TermSubjectMark", Storage="_Student_TermSubjectMarks", ThisKey="StudentInClassId", OtherKey="StudentInClassId")]
		public EntitySet<Student_TermSubjectMark> Student_TermSubjectMarks
		{
			get
			{
				return this._Student_TermSubjectMarks;
			}
			set
			{
				this._Student_TermSubjectMarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_MessageToParents_Message", Storage="_MessageToParents_Messages", ThisKey="StudentInClassId", OtherKey="StudentInClassId")]
		public EntitySet<MessageToParents_Message> MessageToParents_Messages
		{
			get
			{
				return this._MessageToParents_Messages;
			}
			set
			{
				this._MessageToParents_Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_ParentComment_Comment", Storage="_ParentComment_Comments", ThisKey="StudentInClassId", OtherKey="StudentInClassId")]
		public EntitySet<ParentComment_Comment> ParentComment_Comments
		{
			get
			{
				return this._ParentComment_Comments;
			}
			set
			{
				this._ParentComment_Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Class_Student_StudentInClass", Storage="_Class_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class_Class Class_Class
		{
			get
			{
				return this._Class_Class.Entity;
			}
			set
			{
				Class_Class previousValue = this._Class_Class.Entity;
				if (((previousValue != value) 
							|| (this._Class_Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class_Class.Entity = null;
						previousValue.Student_StudentInClasses.Remove(this);
					}
					this._Class_Class.Entity = value;
					if ((value != null))
					{
						value.Student_StudentInClasses.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class_Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Student_Student_StudentInClass", Storage="_Student_Student", ThisKey="StudentId", OtherKey="StudentId", IsForeignKey=true)]
		public Student_Student Student_Student
		{
			get
			{
				return this._Student_Student.Entity;
			}
			set
			{
				Student_Student previousValue = this._Student_Student.Entity;
				if (((previousValue != value) 
							|| (this._Student_Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student_Student.Entity = null;
						previousValue.Student_StudentInClasses.Remove(this);
					}
					this._Student_Student.Entity = value;
					if ((value != null))
					{
						value.Student_StudentInClasses.Add(this);
						this._StudentId = value.StudentId;
					}
					else
					{
						this._StudentId = default(int);
					}
					this.SendPropertyChanged("Student_Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Student_Absents(Student_Absent entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = this;
		}
		
		private void detach_Student_Absents(Student_Absent entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = null;
		}
		
		private void attach_Student_Activities(Student_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = this;
		}
		
		private void detach_Student_Activities(Student_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = null;
		}
		
		private void attach_Student_TermLearningResults(Student_TermLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = this;
		}
		
		private void detach_Student_TermLearningResults(Student_TermLearningResult entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = null;
		}
		
		private void attach_Student_TermSubjectMarks(Student_TermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = this;
		}
		
		private void detach_Student_TermSubjectMarks(Student_TermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = null;
		}
		
		private void attach_MessageToParents_Messages(MessageToParents_Message entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = this;
		}
		
		private void detach_MessageToParents_Messages(MessageToParents_Message entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = null;
		}
		
		private void attach_ParentComment_Comments(ParentComment_Comment entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = this;
		}
		
		private void detach_ParentComment_Comments(ParentComment_Comment entity)
		{
			this.SendPropertyChanging();
			entity.Student_StudentInClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_TermLearningResult")]
	public partial class Student_TermLearningResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TermLearningResultId;
		
		private int _TermId;
		
		private int _StudentInClassId;
		
		private System.Nullable<double> _TermAverageMark;
		
		private System.Nullable<int> _TermLearningAptitudeId;
		
		private System.Nullable<int> _TermConductId;
		
		private EntityRef<Configuration_Term> _Configuration_Term;
		
		private EntityRef<Student_StudentInClass> _Student_StudentInClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermLearningResultIdChanging(int value);
    partial void OnTermLearningResultIdChanged();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnStudentInClassIdChanging(int value);
    partial void OnStudentInClassIdChanged();
    partial void OnTermAverageMarkChanging(System.Nullable<double> value);
    partial void OnTermAverageMarkChanged();
    partial void OnTermLearningAptitudeIdChanging(System.Nullable<int> value);
    partial void OnTermLearningAptitudeIdChanged();
    partial void OnTermConductIdChanging(System.Nullable<int> value);
    partial void OnTermConductIdChanged();
    #endregion
		
		public Student_TermLearningResult()
		{
			this._Configuration_Term = default(EntityRef<Configuration_Term>);
			this._Student_StudentInClass = default(EntityRef<Student_StudentInClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermLearningResultId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TermLearningResultId
		{
			get
			{
				return this._TermLearningResultId;
			}
			set
			{
				if ((this._TermLearningResultId != value))
				{
					this.OnTermLearningResultIdChanging(value);
					this.SendPropertyChanging();
					this._TermLearningResultId = value;
					this.SendPropertyChanged("TermLearningResultId");
					this.OnTermLearningResultIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL")]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._Configuration_Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentInClassId", DbType="Int NOT NULL")]
		public int StudentInClassId
		{
			get
			{
				return this._StudentInClassId;
			}
			set
			{
				if ((this._StudentInClassId != value))
				{
					if (this._Student_StudentInClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentInClassIdChanging(value);
					this.SendPropertyChanging();
					this._StudentInClassId = value;
					this.SendPropertyChanged("StudentInClassId");
					this.OnStudentInClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermAverageMark", DbType="Float")]
		public System.Nullable<double> TermAverageMark
		{
			get
			{
				return this._TermAverageMark;
			}
			set
			{
				if ((this._TermAverageMark != value))
				{
					this.OnTermAverageMarkChanging(value);
					this.SendPropertyChanging();
					this._TermAverageMark = value;
					this.SendPropertyChanged("TermAverageMark");
					this.OnTermAverageMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermLearningAptitudeId", DbType="Int")]
		public System.Nullable<int> TermLearningAptitudeId
		{
			get
			{
				return this._TermLearningAptitudeId;
			}
			set
			{
				if ((this._TermLearningAptitudeId != value))
				{
					this.OnTermLearningAptitudeIdChanging(value);
					this.SendPropertyChanging();
					this._TermLearningAptitudeId = value;
					this.SendPropertyChanged("TermLearningAptitudeId");
					this.OnTermLearningAptitudeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermConductId", DbType="Int")]
		public System.Nullable<int> TermConductId
		{
			get
			{
				return this._TermConductId;
			}
			set
			{
				if ((this._TermConductId != value))
				{
					this.OnTermConductIdChanging(value);
					this.SendPropertyChanging();
					this._TermConductId = value;
					this.SendPropertyChanged("TermConductId");
					this.OnTermConductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Student_TermLearningResult", Storage="_Configuration_Term", ThisKey="TermId", OtherKey="TermId", IsForeignKey=true)]
		public Configuration_Term Configuration_Term
		{
			get
			{
				return this._Configuration_Term.Entity;
			}
			set
			{
				Configuration_Term previousValue = this._Configuration_Term.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Term.Entity = null;
						previousValue.Student_TermLearningResults.Remove(this);
					}
					this._Configuration_Term.Entity = value;
					if ((value != null))
					{
						value.Student_TermLearningResults.Add(this);
						this._TermId = value.TermId;
					}
					else
					{
						this._TermId = default(int);
					}
					this.SendPropertyChanged("Configuration_Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_Student_TermLearningResult", Storage="_Student_StudentInClass", ThisKey="StudentInClassId", OtherKey="StudentInClassId", IsForeignKey=true)]
		public Student_StudentInClass Student_StudentInClass
		{
			get
			{
				return this._Student_StudentInClass.Entity;
			}
			set
			{
				Student_StudentInClass previousValue = this._Student_StudentInClass.Entity;
				if (((previousValue != value) 
							|| (this._Student_StudentInClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student_StudentInClass.Entity = null;
						previousValue.Student_TermLearningResults.Remove(this);
					}
					this._Student_StudentInClass.Entity = value;
					if ((value != null))
					{
						value.Student_TermLearningResults.Add(this);
						this._StudentInClassId = value.StudentInClassId;
					}
					else
					{
						this._StudentInClassId = default(int);
					}
					this.SendPropertyChanged("Student_StudentInClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_TermSubjectMark")]
	public partial class Student_TermSubjectMark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TermSubjectMarkId;
		
		private int _StudentInClassId;
		
		private int _SubjectId;
		
		private int _TermId;
		
		private double _AverageMark;
		
		private EntitySet<Student_DetailedTermSubjectMark> _Student_DetailedTermSubjectMarks;
		
		private EntityRef<Configuration_Term> _Configuration_Term;
		
		private EntityRef<Student_StudentInClass> _Student_StudentInClass;
		
		private EntityRef<Category_Subject> _Category_Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermSubjectMarkIdChanging(int value);
    partial void OnTermSubjectMarkIdChanged();
    partial void OnStudentInClassIdChanging(int value);
    partial void OnStudentInClassIdChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnAverageMarkChanging(double value);
    partial void OnAverageMarkChanged();
    #endregion
		
		public Student_TermSubjectMark()
		{
			this._Student_DetailedTermSubjectMarks = new EntitySet<Student_DetailedTermSubjectMark>(new Action<Student_DetailedTermSubjectMark>(this.attach_Student_DetailedTermSubjectMarks), new Action<Student_DetailedTermSubjectMark>(this.detach_Student_DetailedTermSubjectMarks));
			this._Configuration_Term = default(EntityRef<Configuration_Term>);
			this._Student_StudentInClass = default(EntityRef<Student_StudentInClass>);
			this._Category_Subject = default(EntityRef<Category_Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermSubjectMarkId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TermSubjectMarkId
		{
			get
			{
				return this._TermSubjectMarkId;
			}
			set
			{
				if ((this._TermSubjectMarkId != value))
				{
					this.OnTermSubjectMarkIdChanging(value);
					this.SendPropertyChanging();
					this._TermSubjectMarkId = value;
					this.SendPropertyChanged("TermSubjectMarkId");
					this.OnTermSubjectMarkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentInClassId", DbType="Int NOT NULL")]
		public int StudentInClassId
		{
			get
			{
				return this._StudentInClassId;
			}
			set
			{
				if ((this._StudentInClassId != value))
				{
					if (this._Student_StudentInClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentInClassIdChanging(value);
					this.SendPropertyChanging();
					this._StudentInClassId = value;
					this.SendPropertyChanged("StudentInClassId");
					this.OnStudentInClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int NOT NULL")]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Category_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL")]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._Configuration_Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageMark", DbType="Float NOT NULL")]
		public double AverageMark
		{
			get
			{
				return this._AverageMark;
			}
			set
			{
				if ((this._AverageMark != value))
				{
					this.OnAverageMarkChanging(value);
					this.SendPropertyChanging();
					this._AverageMark = value;
					this.SendPropertyChanged("AverageMark");
					this.OnAverageMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_TermSubjectMark_Student_DetailedTermSubjectMark", Storage="_Student_DetailedTermSubjectMarks", ThisKey="TermSubjectMarkId", OtherKey="TermSubjectMarkId")]
		public EntitySet<Student_DetailedTermSubjectMark> Student_DetailedTermSubjectMarks
		{
			get
			{
				return this._Student_DetailedTermSubjectMarks;
			}
			set
			{
				this._Student_DetailedTermSubjectMarks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Student_TermSubjectMark", Storage="_Configuration_Term", ThisKey="TermId", OtherKey="TermId", IsForeignKey=true)]
		public Configuration_Term Configuration_Term
		{
			get
			{
				return this._Configuration_Term.Entity;
			}
			set
			{
				Configuration_Term previousValue = this._Configuration_Term.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Term.Entity = null;
						previousValue.Student_TermSubjectMarks.Remove(this);
					}
					this._Configuration_Term.Entity = value;
					if ((value != null))
					{
						value.Student_TermSubjectMarks.Add(this);
						this._TermId = value.TermId;
					}
					else
					{
						this._TermId = default(int);
					}
					this.SendPropertyChanged("Configuration_Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_Student_TermSubjectMark", Storage="_Student_StudentInClass", ThisKey="StudentInClassId", OtherKey="StudentInClassId", IsForeignKey=true)]
		public Student_StudentInClass Student_StudentInClass
		{
			get
			{
				return this._Student_StudentInClass.Entity;
			}
			set
			{
				Student_StudentInClass previousValue = this._Student_StudentInClass.Entity;
				if (((previousValue != value) 
							|| (this._Student_StudentInClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student_StudentInClass.Entity = null;
						previousValue.Student_TermSubjectMarks.Remove(this);
					}
					this._Student_StudentInClass.Entity = value;
					if ((value != null))
					{
						value.Student_TermSubjectMarks.Add(this);
						this._StudentInClassId = value.StudentInClassId;
					}
					else
					{
						this._StudentInClassId = default(int);
					}
					this.SendPropertyChanged("Student_StudentInClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subject_Student_TermSubjectMark", Storage="_Category_Subject", ThisKey="SubjectId", OtherKey="SubjectId", IsForeignKey=true)]
		public Category_Subject Category_Subject
		{
			get
			{
				return this._Category_Subject.Entity;
			}
			set
			{
				Category_Subject previousValue = this._Category_Subject.Entity;
				if (((previousValue != value) 
							|| (this._Category_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_Subject.Entity = null;
						previousValue.Student_TermSubjectMarks.Remove(this);
					}
					this._Category_Subject.Entity = value;
					if ((value != null))
					{
						value.Student_TermSubjectMarks.Add(this);
						this._SubjectId = value.SubjectId;
					}
					else
					{
						this._SubjectId = default(int);
					}
					this.SendPropertyChanged("Category_Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Student_DetailedTermSubjectMarks(Student_DetailedTermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Student_TermSubjectMark = this;
		}
		
		private void detach_Student_DetailedTermSubjectMarks(Student_DetailedTermSubjectMark entity)
		{
			this.SendPropertyChanging();
			entity.Student_TermSubjectMark = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.System_Parameters")]
	public partial class System_Parameter
	{
		
		private int _HomePageFunctionId;
		
		public System_Parameter()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePageFunctionId", DbType="Int NOT NULL")]
		public int HomePageFunctionId
		{
			get
			{
				return this._HomePageFunctionId;
			}
			set
			{
				if ((this._HomePageFunctionId != value))
				{
					this._HomePageFunctionId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserManagement_Accessibility")]
	public partial class UserManagement_Accessibility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessibilityId;
		
		private string _AccessibilityName;
		
		private EntitySet<UserManagement_AuthorizedPage> _UserManagement_AuthorizedPages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessibilityIdChanging(int value);
    partial void OnAccessibilityIdChanged();
    partial void OnAccessibilityNameChanging(string value);
    partial void OnAccessibilityNameChanged();
    #endregion
		
		public UserManagement_Accessibility()
		{
			this._UserManagement_AuthorizedPages = new EntitySet<UserManagement_AuthorizedPage>(new Action<UserManagement_AuthorizedPage>(this.attach_UserManagement_AuthorizedPages), new Action<UserManagement_AuthorizedPage>(this.detach_UserManagement_AuthorizedPages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessibilityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccessibilityId
		{
			get
			{
				return this._AccessibilityId;
			}
			set
			{
				if ((this._AccessibilityId != value))
				{
					this.OnAccessibilityIdChanging(value);
					this.SendPropertyChanging();
					this._AccessibilityId = value;
					this.SendPropertyChanged("AccessibilityId");
					this.OnAccessibilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessibilityName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AccessibilityName
		{
			get
			{
				return this._AccessibilityName;
			}
			set
			{
				if ((this._AccessibilityName != value))
				{
					this.OnAccessibilityNameChanging(value);
					this.SendPropertyChanging();
					this._AccessibilityName = value;
					this.SendPropertyChanged("AccessibilityName");
					this.OnAccessibilityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_Accessibility_UserManagement_AuthorizedPage", Storage="_UserManagement_AuthorizedPages", ThisKey="AccessibilityId", OtherKey="AccessibilityId")]
		public EntitySet<UserManagement_AuthorizedPage> UserManagement_AuthorizedPages
		{
			get
			{
				return this._UserManagement_AuthorizedPages;
			}
			set
			{
				this._UserManagement_AuthorizedPages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserManagement_AuthorizedPages(UserManagement_AuthorizedPage entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_Accessibility = this;
		}
		
		private void detach_UserManagement_AuthorizedPages(UserManagement_AuthorizedPage entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_Accessibility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserManagement_AuthorizedPage")]
	public partial class UserManagement_AuthorizedPage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorizedPageId;
		
		private int _FunctionId;
		
		private int _AccessibilityId;
		
		private int _PagePathId;
		
		private string _Description;
		
		private EntitySet<UserManagement_Authorization> _UserManagement_Authorizations;
		
		private EntityRef<UserManagement_Accessibility> _UserManagement_Accessibility;
		
		private EntityRef<UserManagement_Function> _UserManagement_Function;
		
		private EntityRef<UserManagement_PagePath> _UserManagement_PagePath;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorizedPageIdChanging(int value);
    partial void OnAuthorizedPageIdChanged();
    partial void OnFunctionIdChanging(int value);
    partial void OnFunctionIdChanged();
    partial void OnAccessibilityIdChanging(int value);
    partial void OnAccessibilityIdChanged();
    partial void OnPagePathIdChanging(int value);
    partial void OnPagePathIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UserManagement_AuthorizedPage()
		{
			this._UserManagement_Authorizations = new EntitySet<UserManagement_Authorization>(new Action<UserManagement_Authorization>(this.attach_UserManagement_Authorizations), new Action<UserManagement_Authorization>(this.detach_UserManagement_Authorizations));
			this._UserManagement_Accessibility = default(EntityRef<UserManagement_Accessibility>);
			this._UserManagement_Function = default(EntityRef<UserManagement_Function>);
			this._UserManagement_PagePath = default(EntityRef<UserManagement_PagePath>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizedPageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorizedPageId
		{
			get
			{
				return this._AuthorizedPageId;
			}
			set
			{
				if ((this._AuthorizedPageId != value))
				{
					this.OnAuthorizedPageIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedPageId = value;
					this.SendPropertyChanged("AuthorizedPageId");
					this.OnAuthorizedPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionId", DbType="Int NOT NULL")]
		public int FunctionId
		{
			get
			{
				return this._FunctionId;
			}
			set
			{
				if ((this._FunctionId != value))
				{
					if (this._UserManagement_Function.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._FunctionId = value;
					this.SendPropertyChanged("FunctionId");
					this.OnFunctionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessibilityId", DbType="Int NOT NULL")]
		public int AccessibilityId
		{
			get
			{
				return this._AccessibilityId;
			}
			set
			{
				if ((this._AccessibilityId != value))
				{
					if (this._UserManagement_Accessibility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessibilityIdChanging(value);
					this.SendPropertyChanging();
					this._AccessibilityId = value;
					this.SendPropertyChanged("AccessibilityId");
					this.OnAccessibilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PagePathId", DbType="Int NOT NULL")]
		public int PagePathId
		{
			get
			{
				return this._PagePathId;
			}
			set
			{
				if ((this._PagePathId != value))
				{
					if (this._UserManagement_PagePath.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPagePathIdChanging(value);
					this.SendPropertyChanging();
					this._PagePathId = value;
					this.SendPropertyChanged("PagePathId");
					this.OnPagePathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_AuthorizedPage_UserManagement_Authorization", Storage="_UserManagement_Authorizations", ThisKey="AuthorizedPageId", OtherKey="AuthorizedPagePathId")]
		public EntitySet<UserManagement_Authorization> UserManagement_Authorizations
		{
			get
			{
				return this._UserManagement_Authorizations;
			}
			set
			{
				this._UserManagement_Authorizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_Accessibility_UserManagement_AuthorizedPage", Storage="_UserManagement_Accessibility", ThisKey="AccessibilityId", OtherKey="AccessibilityId", IsForeignKey=true)]
		public UserManagement_Accessibility UserManagement_Accessibility
		{
			get
			{
				return this._UserManagement_Accessibility.Entity;
			}
			set
			{
				UserManagement_Accessibility previousValue = this._UserManagement_Accessibility.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_Accessibility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_Accessibility.Entity = null;
						previousValue.UserManagement_AuthorizedPages.Remove(this);
					}
					this._UserManagement_Accessibility.Entity = value;
					if ((value != null))
					{
						value.UserManagement_AuthorizedPages.Add(this);
						this._AccessibilityId = value.AccessibilityId;
					}
					else
					{
						this._AccessibilityId = default(int);
					}
					this.SendPropertyChanged("UserManagement_Accessibility");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_Function_UserManagement_AuthorizedPage", Storage="_UserManagement_Function", ThisKey="FunctionId", OtherKey="FunctionId", IsForeignKey=true)]
		public UserManagement_Function UserManagement_Function
		{
			get
			{
				return this._UserManagement_Function.Entity;
			}
			set
			{
				UserManagement_Function previousValue = this._UserManagement_Function.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_Function.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_Function.Entity = null;
						previousValue.UserManagement_AuthorizedPages.Remove(this);
					}
					this._UserManagement_Function.Entity = value;
					if ((value != null))
					{
						value.UserManagement_AuthorizedPages.Add(this);
						this._FunctionId = value.FunctionId;
					}
					else
					{
						this._FunctionId = default(int);
					}
					this.SendPropertyChanged("UserManagement_Function");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_PagePath_UserManagement_AuthorizedPage", Storage="_UserManagement_PagePath", ThisKey="PagePathId", OtherKey="PagePathId", IsForeignKey=true)]
		public UserManagement_PagePath UserManagement_PagePath
		{
			get
			{
				return this._UserManagement_PagePath.Entity;
			}
			set
			{
				UserManagement_PagePath previousValue = this._UserManagement_PagePath.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_PagePath.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_PagePath.Entity = null;
						previousValue.UserManagement_AuthorizedPages.Remove(this);
					}
					this._UserManagement_PagePath.Entity = value;
					if ((value != null))
					{
						value.UserManagement_AuthorizedPages.Add(this);
						this._PagePathId = value.PagePathId;
					}
					else
					{
						this._PagePathId = default(int);
					}
					this.SendPropertyChanged("UserManagement_PagePath");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserManagement_Authorizations(UserManagement_Authorization entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_AuthorizedPage = this;
		}
		
		private void detach_UserManagement_Authorizations(UserManagement_Authorization entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_AuthorizedPage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserManagement_Function")]
	public partial class UserManagement_Function : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FunctionId;
		
		private string _FunctionName;
		
		private string _FunctionCategory;
		
		private string _FunctionFlag;
		
		private System.Nullable<int> _ParentFunctionId;
		
		private EntitySet<UserManagement_AuthorizedPage> _UserManagement_AuthorizedPages;
		
		private EntitySet<UserManagement_Menu> _UserManagement_Menus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFunctionIdChanging(int value);
    partial void OnFunctionIdChanged();
    partial void OnFunctionNameChanging(string value);
    partial void OnFunctionNameChanged();
    partial void OnFunctionCategoryChanging(string value);
    partial void OnFunctionCategoryChanged();
    partial void OnFunctionFlagChanging(string value);
    partial void OnFunctionFlagChanged();
    partial void OnParentFunctionIdChanging(System.Nullable<int> value);
    partial void OnParentFunctionIdChanged();
    #endregion
		
		public UserManagement_Function()
		{
			this._UserManagement_AuthorizedPages = new EntitySet<UserManagement_AuthorizedPage>(new Action<UserManagement_AuthorizedPage>(this.attach_UserManagement_AuthorizedPages), new Action<UserManagement_AuthorizedPage>(this.detach_UserManagement_AuthorizedPages));
			this._UserManagement_Menus = new EntitySet<UserManagement_Menu>(new Action<UserManagement_Menu>(this.attach_UserManagement_Menus), new Action<UserManagement_Menu>(this.detach_UserManagement_Menus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FunctionId
		{
			get
			{
				return this._FunctionId;
			}
			set
			{
				if ((this._FunctionId != value))
				{
					this.OnFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._FunctionId = value;
					this.SendPropertyChanged("FunctionId");
					this.OnFunctionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FunctionName
		{
			get
			{
				return this._FunctionName;
			}
			set
			{
				if ((this._FunctionName != value))
				{
					this.OnFunctionNameChanging(value);
					this.SendPropertyChanging();
					this._FunctionName = value;
					this.SendPropertyChanged("FunctionName");
					this.OnFunctionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionCategory", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FunctionCategory
		{
			get
			{
				return this._FunctionCategory;
			}
			set
			{
				if ((this._FunctionCategory != value))
				{
					this.OnFunctionCategoryChanging(value);
					this.SendPropertyChanging();
					this._FunctionCategory = value;
					this.SendPropertyChanged("FunctionCategory");
					this.OnFunctionCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionFlag", DbType="NVarChar(50)")]
		public string FunctionFlag
		{
			get
			{
				return this._FunctionFlag;
			}
			set
			{
				if ((this._FunctionFlag != value))
				{
					this.OnFunctionFlagChanging(value);
					this.SendPropertyChanging();
					this._FunctionFlag = value;
					this.SendPropertyChanged("FunctionFlag");
					this.OnFunctionFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentFunctionId", DbType="Int")]
		public System.Nullable<int> ParentFunctionId
		{
			get
			{
				return this._ParentFunctionId;
			}
			set
			{
				if ((this._ParentFunctionId != value))
				{
					this.OnParentFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._ParentFunctionId = value;
					this.SendPropertyChanged("ParentFunctionId");
					this.OnParentFunctionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_Function_UserManagement_AuthorizedPage", Storage="_UserManagement_AuthorizedPages", ThisKey="FunctionId", OtherKey="FunctionId")]
		public EntitySet<UserManagement_AuthorizedPage> UserManagement_AuthorizedPages
		{
			get
			{
				return this._UserManagement_AuthorizedPages;
			}
			set
			{
				this._UserManagement_AuthorizedPages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_Function_UserManagement_Menu", Storage="_UserManagement_Menus", ThisKey="FunctionId", OtherKey="FunctionId")]
		public EntitySet<UserManagement_Menu> UserManagement_Menus
		{
			get
			{
				return this._UserManagement_Menus;
			}
			set
			{
				this._UserManagement_Menus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserManagement_AuthorizedPages(UserManagement_AuthorizedPage entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_Function = this;
		}
		
		private void detach_UserManagement_AuthorizedPages(UserManagement_AuthorizedPage entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_Function = null;
		}
		
		private void attach_UserManagement_Menus(UserManagement_Menu entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_Function = this;
		}
		
		private void detach_UserManagement_Menus(UserManagement_Menu entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_Function = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserManagement_Menu")]
	public partial class UserManagement_Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MenuId;
		
		private System.Nullable<int> _FunctionId;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<int> _PagePathId;
		
		private System.Nullable<int> _ParentMenuId;
		
		private int _MenuLevel;
		
		private System.Nullable<bool> _IsDisplayed;
		
		private int _DisplayOrder;
		
		private EntityRef<UserManagement_Function> _UserManagement_Function;
		
		private EntityRef<UserManagement_PagePath> _UserManagement_PagePath;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMenuIdChanging(int value);
    partial void OnMenuIdChanged();
    partial void OnFunctionIdChanging(System.Nullable<int> value);
    partial void OnFunctionIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPagePathIdChanging(System.Nullable<int> value);
    partial void OnPagePathIdChanged();
    partial void OnParentMenuIdChanging(System.Nullable<int> value);
    partial void OnParentMenuIdChanged();
    partial void OnMenuLevelChanging(int value);
    partial void OnMenuLevelChanged();
    partial void OnIsDisplayedChanging(System.Nullable<bool> value);
    partial void OnIsDisplayedChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public UserManagement_Menu()
		{
			this._UserManagement_Function = default(EntityRef<UserManagement_Function>);
			this._UserManagement_PagePath = default(EntityRef<UserManagement_PagePath>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MenuId
		{
			get
			{
				return this._MenuId;
			}
			set
			{
				if ((this._MenuId != value))
				{
					this.OnMenuIdChanging(value);
					this.SendPropertyChanging();
					this._MenuId = value;
					this.SendPropertyChanged("MenuId");
					this.OnMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionId", DbType="Int")]
		public System.Nullable<int> FunctionId
		{
			get
			{
				return this._FunctionId;
			}
			set
			{
				if ((this._FunctionId != value))
				{
					if (this._UserManagement_Function.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFunctionIdChanging(value);
					this.SendPropertyChanging();
					this._FunctionId = value;
					this.SendPropertyChanged("FunctionId");
					this.OnFunctionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PagePathId", DbType="Int")]
		public System.Nullable<int> PagePathId
		{
			get
			{
				return this._PagePathId;
			}
			set
			{
				if ((this._PagePathId != value))
				{
					if (this._UserManagement_PagePath.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPagePathIdChanging(value);
					this.SendPropertyChanging();
					this._PagePathId = value;
					this.SendPropertyChanged("PagePathId");
					this.OnPagePathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentMenuId", DbType="Int")]
		public System.Nullable<int> ParentMenuId
		{
			get
			{
				return this._ParentMenuId;
			}
			set
			{
				if ((this._ParentMenuId != value))
				{
					this.OnParentMenuIdChanging(value);
					this.SendPropertyChanging();
					this._ParentMenuId = value;
					this.SendPropertyChanged("ParentMenuId");
					this.OnParentMenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuLevel", DbType="Int NOT NULL")]
		public int MenuLevel
		{
			get
			{
				return this._MenuLevel;
			}
			set
			{
				if ((this._MenuLevel != value))
				{
					this.OnMenuLevelChanging(value);
					this.SendPropertyChanging();
					this._MenuLevel = value;
					this.SendPropertyChanged("MenuLevel");
					this.OnMenuLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplayed", DbType="Bit")]
		public System.Nullable<bool> IsDisplayed
		{
			get
			{
				return this._IsDisplayed;
			}
			set
			{
				if ((this._IsDisplayed != value))
				{
					this.OnIsDisplayedChanging(value);
					this.SendPropertyChanging();
					this._IsDisplayed = value;
					this.SendPropertyChanged("IsDisplayed");
					this.OnIsDisplayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_Function_UserManagement_Menu", Storage="_UserManagement_Function", ThisKey="FunctionId", OtherKey="FunctionId", IsForeignKey=true)]
		public UserManagement_Function UserManagement_Function
		{
			get
			{
				return this._UserManagement_Function.Entity;
			}
			set
			{
				UserManagement_Function previousValue = this._UserManagement_Function.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_Function.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_Function.Entity = null;
						previousValue.UserManagement_Menus.Remove(this);
					}
					this._UserManagement_Function.Entity = value;
					if ((value != null))
					{
						value.UserManagement_Menus.Add(this);
						this._FunctionId = value.FunctionId;
					}
					else
					{
						this._FunctionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserManagement_Function");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_PagePath_UserManagement_Menu", Storage="_UserManagement_PagePath", ThisKey="PagePathId", OtherKey="PagePathId", IsForeignKey=true)]
		public UserManagement_PagePath UserManagement_PagePath
		{
			get
			{
				return this._UserManagement_PagePath.Entity;
			}
			set
			{
				UserManagement_PagePath previousValue = this._UserManagement_PagePath.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_PagePath.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_PagePath.Entity = null;
						previousValue.UserManagement_Menus.Remove(this);
					}
					this._UserManagement_PagePath.Entity = value;
					if ((value != null))
					{
						value.UserManagement_Menus.Add(this);
						this._PagePathId = value.PagePathId;
					}
					else
					{
						this._PagePathId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserManagement_PagePath");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserManagement_PagePath")]
	public partial class UserManagement_PagePath : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PagePathId;
		
		private string _PageTitle;
		
		private string _PhysicalPath;
		
		private EntitySet<UserManagement_AuthorizedPage> _UserManagement_AuthorizedPages;
		
		private EntitySet<UserManagement_Menu> _UserManagement_Menus;
		
		private EntitySet<UserManagement_RoleCategory> _UserManagement_RoleCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPagePathIdChanging(int value);
    partial void OnPagePathIdChanged();
    partial void OnPageTitleChanging(string value);
    partial void OnPageTitleChanged();
    partial void OnPhysicalPathChanging(string value);
    partial void OnPhysicalPathChanged();
    #endregion
		
		public UserManagement_PagePath()
		{
			this._UserManagement_AuthorizedPages = new EntitySet<UserManagement_AuthorizedPage>(new Action<UserManagement_AuthorizedPage>(this.attach_UserManagement_AuthorizedPages), new Action<UserManagement_AuthorizedPage>(this.detach_UserManagement_AuthorizedPages));
			this._UserManagement_Menus = new EntitySet<UserManagement_Menu>(new Action<UserManagement_Menu>(this.attach_UserManagement_Menus), new Action<UserManagement_Menu>(this.detach_UserManagement_Menus));
			this._UserManagement_RoleCategories = new EntitySet<UserManagement_RoleCategory>(new Action<UserManagement_RoleCategory>(this.attach_UserManagement_RoleCategories), new Action<UserManagement_RoleCategory>(this.detach_UserManagement_RoleCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PagePathId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PagePathId
		{
			get
			{
				return this._PagePathId;
			}
			set
			{
				if ((this._PagePathId != value))
				{
					this.OnPagePathIdChanging(value);
					this.SendPropertyChanging();
					this._PagePathId = value;
					this.SendPropertyChanged("PagePathId");
					this.OnPagePathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageTitle", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PageTitle
		{
			get
			{
				return this._PageTitle;
			}
			set
			{
				if ((this._PageTitle != value))
				{
					this.OnPageTitleChanging(value);
					this.SendPropertyChanging();
					this._PageTitle = value;
					this.SendPropertyChanged("PageTitle");
					this.OnPageTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalPath", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string PhysicalPath
		{
			get
			{
				return this._PhysicalPath;
			}
			set
			{
				if ((this._PhysicalPath != value))
				{
					this.OnPhysicalPathChanging(value);
					this.SendPropertyChanging();
					this._PhysicalPath = value;
					this.SendPropertyChanged("PhysicalPath");
					this.OnPhysicalPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_PagePath_UserManagement_AuthorizedPage", Storage="_UserManagement_AuthorizedPages", ThisKey="PagePathId", OtherKey="PagePathId")]
		public EntitySet<UserManagement_AuthorizedPage> UserManagement_AuthorizedPages
		{
			get
			{
				return this._UserManagement_AuthorizedPages;
			}
			set
			{
				this._UserManagement_AuthorizedPages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_PagePath_UserManagement_Menu", Storage="_UserManagement_Menus", ThisKey="PagePathId", OtherKey="PagePathId")]
		public EntitySet<UserManagement_Menu> UserManagement_Menus
		{
			get
			{
				return this._UserManagement_Menus;
			}
			set
			{
				this._UserManagement_Menus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_PagePath_UserManagement_RoleCategory", Storage="_UserManagement_RoleCategories", ThisKey="PagePathId", OtherKey="DefaultPageId")]
		public EntitySet<UserManagement_RoleCategory> UserManagement_RoleCategories
		{
			get
			{
				return this._UserManagement_RoleCategories;
			}
			set
			{
				this._UserManagement_RoleCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserManagement_AuthorizedPages(UserManagement_AuthorizedPage entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_PagePath = this;
		}
		
		private void detach_UserManagement_AuthorizedPages(UserManagement_AuthorizedPage entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_PagePath = null;
		}
		
		private void attach_UserManagement_Menus(UserManagement_Menu entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_PagePath = this;
		}
		
		private void detach_UserManagement_Menus(UserManagement_Menu entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_PagePath = null;
		}
		
		private void attach_UserManagement_RoleCategories(UserManagement_RoleCategory entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_PagePath = this;
		}
		
		private void detach_UserManagement_RoleCategories(UserManagement_RoleCategory entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_PagePath = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserManagement_RoleCategory")]
	public partial class UserManagement_RoleCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RoleCategoryId;
		
		private string _FunctionFlag;
		
		private int _DefaultPageId;
		
		private EntitySet<UserManagement_RoleDetail> _UserManagement_RoleDetails;
		
		private EntityRef<UserManagement_PagePath> _UserManagement_PagePath;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleCategoryIdChanging(string value);
    partial void OnRoleCategoryIdChanged();
    partial void OnFunctionFlagChanging(string value);
    partial void OnFunctionFlagChanged();
    partial void OnDefaultPageIdChanging(int value);
    partial void OnDefaultPageIdChanged();
    #endregion
		
		public UserManagement_RoleCategory()
		{
			this._UserManagement_RoleDetails = new EntitySet<UserManagement_RoleDetail>(new Action<UserManagement_RoleDetail>(this.attach_UserManagement_RoleDetails), new Action<UserManagement_RoleDetail>(this.detach_UserManagement_RoleDetails));
			this._UserManagement_PagePath = default(EntityRef<UserManagement_PagePath>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleCategoryId", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleCategoryId
		{
			get
			{
				return this._RoleCategoryId;
			}
			set
			{
				if ((this._RoleCategoryId != value))
				{
					this.OnRoleCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._RoleCategoryId = value;
					this.SendPropertyChanged("RoleCategoryId");
					this.OnRoleCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FunctionFlag", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FunctionFlag
		{
			get
			{
				return this._FunctionFlag;
			}
			set
			{
				if ((this._FunctionFlag != value))
				{
					this.OnFunctionFlagChanging(value);
					this.SendPropertyChanging();
					this._FunctionFlag = value;
					this.SendPropertyChanged("FunctionFlag");
					this.OnFunctionFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultPageId", DbType="Int NOT NULL")]
		public int DefaultPageId
		{
			get
			{
				return this._DefaultPageId;
			}
			set
			{
				if ((this._DefaultPageId != value))
				{
					if (this._UserManagement_PagePath.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefaultPageIdChanging(value);
					this.SendPropertyChanging();
					this._DefaultPageId = value;
					this.SendPropertyChanged("DefaultPageId");
					this.OnDefaultPageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_RoleCategory_UserManagement_RoleDetail", Storage="_UserManagement_RoleDetails", ThisKey="RoleCategoryId", OtherKey="RoleCategoryId")]
		public EntitySet<UserManagement_RoleDetail> UserManagement_RoleDetails
		{
			get
			{
				return this._UserManagement_RoleDetails;
			}
			set
			{
				this._UserManagement_RoleDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_PagePath_UserManagement_RoleCategory", Storage="_UserManagement_PagePath", ThisKey="DefaultPageId", OtherKey="PagePathId", IsForeignKey=true)]
		public UserManagement_PagePath UserManagement_PagePath
		{
			get
			{
				return this._UserManagement_PagePath.Entity;
			}
			set
			{
				UserManagement_PagePath previousValue = this._UserManagement_PagePath.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_PagePath.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_PagePath.Entity = null;
						previousValue.UserManagement_RoleCategories.Remove(this);
					}
					this._UserManagement_PagePath.Entity = value;
					if ((value != null))
					{
						value.UserManagement_RoleCategories.Add(this);
						this._DefaultPageId = value.PagePathId;
					}
					else
					{
						this._DefaultPageId = default(int);
					}
					this.SendPropertyChanged("UserManagement_PagePath");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserManagement_RoleDetails(UserManagement_RoleDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_RoleCategory = this;
		}
		
		private void detach_UserManagement_RoleDetails(UserManagement_RoleDetail entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_RoleCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserManagement_RoleDetail")]
	public partial class UserManagement_RoleDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RoleId;
		
		private string _DisplayedName;
		
		private bool _IsDeletable;
		
		private System.Nullable<System.Guid> _ParentRoleId;
		
		private string _RoleCategoryId;
		
		private int _SchoolId;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<UserManagement_RoleCategory> _UserManagement_RoleCategory;
		
		private EntityRef<School_School> _School_School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnDisplayedNameChanging(string value);
    partial void OnDisplayedNameChanged();
    partial void OnIsDeletableChanging(bool value);
    partial void OnIsDeletableChanged();
    partial void OnParentRoleIdChanging(System.Nullable<System.Guid> value);
    partial void OnParentRoleIdChanged();
    partial void OnRoleCategoryIdChanging(string value);
    partial void OnRoleCategoryIdChanged();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    #endregion
		
		public UserManagement_RoleDetail()
		{
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._UserManagement_RoleCategory = default(EntityRef<UserManagement_RoleCategory>);
			this._School_School = default(EntityRef<School_School>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayedName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DisplayedName
		{
			get
			{
				return this._DisplayedName;
			}
			set
			{
				if ((this._DisplayedName != value))
				{
					this.OnDisplayedNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayedName = value;
					this.SendPropertyChanged("DisplayedName");
					this.OnDisplayedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeletable", DbType="Bit NOT NULL")]
		public bool IsDeletable
		{
			get
			{
				return this._IsDeletable;
			}
			set
			{
				if ((this._IsDeletable != value))
				{
					this.OnIsDeletableChanging(value);
					this.SendPropertyChanging();
					this._IsDeletable = value;
					this.SendPropertyChanged("IsDeletable");
					this.OnIsDeletableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentRoleId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentRoleId
		{
			get
			{
				return this._ParentRoleId;
			}
			set
			{
				if ((this._ParentRoleId != value))
				{
					this.OnParentRoleIdChanging(value);
					this.SendPropertyChanging();
					this._ParentRoleId = value;
					this.SendPropertyChanged("ParentRoleId");
					this.OnParentRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleCategoryId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleCategoryId
		{
			get
			{
				return this._RoleCategoryId;
			}
			set
			{
				if ((this._RoleCategoryId != value))
				{
					if (this._UserManagement_RoleCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._RoleCategoryId = value;
					this.SendPropertyChanged("RoleCategoryId");
					this.OnRoleCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="Int NOT NULL")]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School_School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_UserManagement_RoleDetail", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.UserManagement_RoleDetail = null;
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.UserManagement_RoleDetail = this;
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_RoleCategory_UserManagement_RoleDetail", Storage="_UserManagement_RoleCategory", ThisKey="RoleCategoryId", OtherKey="RoleCategoryId", IsForeignKey=true)]
		public UserManagement_RoleCategory UserManagement_RoleCategory
		{
			get
			{
				return this._UserManagement_RoleCategory.Entity;
			}
			set
			{
				UserManagement_RoleCategory previousValue = this._UserManagement_RoleCategory.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_RoleCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_RoleCategory.Entity = null;
						previousValue.UserManagement_RoleDetails.Remove(this);
					}
					this._UserManagement_RoleCategory.Entity = value;
					if ((value != null))
					{
						value.UserManagement_RoleDetails.Add(this);
						this._RoleCategoryId = value.RoleCategoryId;
					}
					else
					{
						this._RoleCategoryId = default(string);
					}
					this.SendPropertyChanged("UserManagement_RoleCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_UserManagement_RoleDetail", Storage="_School_School", ThisKey="SchoolId", OtherKey="SchoolId", IsForeignKey=true)]
		public School_School School_School
		{
			get
			{
				return this._School_School.Entity;
			}
			set
			{
				School_School previousValue = this._School_School.Entity;
				if (((previousValue != value) 
							|| (this._School_School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School_School.Entity = null;
						previousValue.UserManagement_RoleDetails.Remove(this);
					}
					this._School_School.Entity = value;
					if ((value != null))
					{
						value.UserManagement_RoleDetails.Add(this);
						this._SchoolId = value.SchoolId;
					}
					else
					{
						this._SchoolId = default(int);
					}
					this.SendPropertyChanged("School_School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category_Attitude")]
	public partial class Category_Attitude : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttitudeId;
		
		private string _AttitudeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttitudeIdChanging(int value);
    partial void OnAttitudeIdChanged();
    partial void OnAttitudeNameChanging(string value);
    partial void OnAttitudeNameChanged();
    #endregion
		
		public Category_Attitude()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttitudeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttitudeId
		{
			get
			{
				return this._AttitudeId;
			}
			set
			{
				if ((this._AttitudeId != value))
				{
					this.OnAttitudeIdChanging(value);
					this.SendPropertyChanging();
					this._AttitudeId = value;
					this.SendPropertyChanged("AttitudeId");
					this.OnAttitudeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttitudeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AttitudeName
		{
			get
			{
				return this._AttitudeName;
			}
			set
			{
				if ((this._AttitudeName != value))
				{
					this.OnAttitudeNameChanging(value);
					this.SendPropertyChanging();
					this._AttitudeName = value;
					this.SendPropertyChanged("AttitudeName");
					this.OnAttitudeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserManagement_Authorization")]
	public partial class UserManagement_Authorization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AuthorizationId;
		
		private System.Guid _RoleId;
		
		private int _AuthorizedPagePathId;
		
		private bool _IsActivated;
		
		private EntitySet<UserManagement_RoleParentsAuthorization> _UserManagement_RoleParentsAuthorizations;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
		private EntityRef<UserManagement_AuthorizedPage> _UserManagement_AuthorizedPage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorizationIdChanging(long value);
    partial void OnAuthorizationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnAuthorizedPagePathIdChanging(int value);
    partial void OnAuthorizedPagePathIdChanged();
    partial void OnIsActivatedChanging(bool value);
    partial void OnIsActivatedChanged();
    #endregion
		
		public UserManagement_Authorization()
		{
			this._UserManagement_RoleParentsAuthorizations = new EntitySet<UserManagement_RoleParentsAuthorization>(new Action<UserManagement_RoleParentsAuthorization>(this.attach_UserManagement_RoleParentsAuthorizations), new Action<UserManagement_RoleParentsAuthorization>(this.detach_UserManagement_RoleParentsAuthorizations));
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			this._UserManagement_AuthorizedPage = default(EntityRef<UserManagement_AuthorizedPage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AuthorizationId
		{
			get
			{
				return this._AuthorizationId;
			}
			set
			{
				if ((this._AuthorizationId != value))
				{
					this.OnAuthorizationIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationId = value;
					this.SendPropertyChanged("AuthorizationId");
					this.OnAuthorizationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizedPagePathId", DbType="Int NOT NULL")]
		public int AuthorizedPagePathId
		{
			get
			{
				return this._AuthorizedPagePathId;
			}
			set
			{
				if ((this._AuthorizedPagePathId != value))
				{
					if (this._UserManagement_AuthorizedPage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorizedPagePathIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizedPagePathId = value;
					this.SendPropertyChanged("AuthorizedPagePathId");
					this.OnAuthorizedPagePathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActivated", DbType="Bit NOT NULL")]
		public bool IsActivated
		{
			get
			{
				return this._IsActivated;
			}
			set
			{
				if ((this._IsActivated != value))
				{
					this.OnIsActivatedChanging(value);
					this.SendPropertyChanging();
					this._IsActivated = value;
					this.SendPropertyChanged("IsActivated");
					this.OnIsActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_Authorization_UserManagement_RoleParentsAuthorization", Storage="_UserManagement_RoleParentsAuthorizations", ThisKey="AuthorizationId", OtherKey="RoleParentAuthorizationId")]
		public EntitySet<UserManagement_RoleParentsAuthorization> UserManagement_RoleParentsAuthorizations
		{
			get
			{
				return this._UserManagement_RoleParentsAuthorizations;
			}
			set
			{
				this._UserManagement_RoleParentsAuthorizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_UserManagement_Authorization", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.UserManagement_Authorizations.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.UserManagement_Authorizations.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_AuthorizedPage_UserManagement_Authorization", Storage="_UserManagement_AuthorizedPage", ThisKey="AuthorizedPagePathId", OtherKey="AuthorizedPageId", IsForeignKey=true)]
		public UserManagement_AuthorizedPage UserManagement_AuthorizedPage
		{
			get
			{
				return this._UserManagement_AuthorizedPage.Entity;
			}
			set
			{
				UserManagement_AuthorizedPage previousValue = this._UserManagement_AuthorizedPage.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_AuthorizedPage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_AuthorizedPage.Entity = null;
						previousValue.UserManagement_Authorizations.Remove(this);
					}
					this._UserManagement_AuthorizedPage.Entity = value;
					if ((value != null))
					{
						value.UserManagement_Authorizations.Add(this);
						this._AuthorizedPagePathId = value.AuthorizedPageId;
					}
					else
					{
						this._AuthorizedPagePathId = default(int);
					}
					this.SendPropertyChanged("UserManagement_AuthorizedPage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserManagement_RoleParentsAuthorizations(UserManagement_RoleParentsAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_Authorization = this;
		}
		
		private void detach_UserManagement_RoleParentsAuthorizations(UserManagement_RoleParentsAuthorization entity)
		{
			this.SendPropertyChanging();
			entity.UserManagement_Authorization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserManagement_RoleParentsAuthorization")]
	public partial class UserManagement_RoleParentsAuthorization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RoleParentAuthorizationId;
		
		private System.Guid _UserParentId;
		
		private bool _GetEmail;
		
		private bool _GetSMS;
		
		private bool _IsRegistered;
		
		private bool _IsActivated;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<UserManagement_Authorization> _UserManagement_Authorization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleParentAuthorizationIdChanging(long value);
    partial void OnRoleParentAuthorizationIdChanged();
    partial void OnUserParentIdChanging(System.Guid value);
    partial void OnUserParentIdChanged();
    partial void OnGetEmailChanging(bool value);
    partial void OnGetEmailChanged();
    partial void OnGetSMSChanging(bool value);
    partial void OnGetSMSChanged();
    partial void OnIsRegisteredChanging(bool value);
    partial void OnIsRegisteredChanged();
    partial void OnIsActivatedChanging(bool value);
    partial void OnIsActivatedChanged();
    #endregion
		
		public UserManagement_RoleParentsAuthorization()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._UserManagement_Authorization = default(EntityRef<UserManagement_Authorization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleParentAuthorizationId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RoleParentAuthorizationId
		{
			get
			{
				return this._RoleParentAuthorizationId;
			}
			set
			{
				if ((this._RoleParentAuthorizationId != value))
				{
					if (this._UserManagement_Authorization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleParentAuthorizationIdChanging(value);
					this.SendPropertyChanging();
					this._RoleParentAuthorizationId = value;
					this.SendPropertyChanged("RoleParentAuthorizationId");
					this.OnRoleParentAuthorizationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserParentId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserParentId
		{
			get
			{
				return this._UserParentId;
			}
			set
			{
				if ((this._UserParentId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserParentIdChanging(value);
					this.SendPropertyChanging();
					this._UserParentId = value;
					this.SendPropertyChanged("UserParentId");
					this.OnUserParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GetEmail", DbType="Bit NOT NULL")]
		public bool GetEmail
		{
			get
			{
				return this._GetEmail;
			}
			set
			{
				if ((this._GetEmail != value))
				{
					this.OnGetEmailChanging(value);
					this.SendPropertyChanging();
					this._GetEmail = value;
					this.SendPropertyChanged("GetEmail");
					this.OnGetEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GetSMS", DbType="Bit NOT NULL")]
		public bool GetSMS
		{
			get
			{
				return this._GetSMS;
			}
			set
			{
				if ((this._GetSMS != value))
				{
					this.OnGetSMSChanging(value);
					this.SendPropertyChanging();
					this._GetSMS = value;
					this.SendPropertyChanged("GetSMS");
					this.OnGetSMSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRegistered", DbType="Bit NOT NULL")]
		public bool IsRegistered
		{
			get
			{
				return this._IsRegistered;
			}
			set
			{
				if ((this._IsRegistered != value))
				{
					this.OnIsRegisteredChanging(value);
					this.SendPropertyChanging();
					this._IsRegistered = value;
					this.SendPropertyChanged("IsRegistered");
					this.OnIsRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActivated", DbType="Bit NOT NULL")]
		public bool IsActivated
		{
			get
			{
				return this._IsActivated;
			}
			set
			{
				if ((this._IsActivated != value))
				{
					this.OnIsActivatedChanging(value);
					this.SendPropertyChanging();
					this._IsActivated = value;
					this.SendPropertyChanged("IsActivated");
					this.OnIsActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_UserManagement_RoleParentsAuthorization", Storage="_aspnet_User", ThisKey="UserParentId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.UserManagement_RoleParentsAuthorizations.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.UserManagement_RoleParentsAuthorizations.Add(this);
						this._UserParentId = value.UserId;
					}
					else
					{
						this._UserParentId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserManagement_Authorization_UserManagement_RoleParentsAuthorization", Storage="_UserManagement_Authorization", ThisKey="RoleParentAuthorizationId", OtherKey="AuthorizationId", IsForeignKey=true)]
		public UserManagement_Authorization UserManagement_Authorization
		{
			get
			{
				return this._UserManagement_Authorization.Entity;
			}
			set
			{
				UserManagement_Authorization previousValue = this._UserManagement_Authorization.Entity;
				if (((previousValue != value) 
							|| (this._UserManagement_Authorization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserManagement_Authorization.Entity = null;
						previousValue.UserManagement_RoleParentsAuthorizations.Remove(this);
					}
					this._UserManagement_Authorization.Entity = value;
					if ((value != null))
					{
						value.UserManagement_RoleParentsAuthorizations.Add(this);
						this._RoleParentAuthorizationId = value.AuthorizationId;
					}
					else
					{
						this._RoleParentAuthorizationId = default(long);
					}
					this.SendPropertyChanged("UserManagement_Authorization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.School_School")]
	public partial class School_School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SchoolId;
		
		private string _SchoolName;
		
		private bool _Status;
		
		private int _TotalOfUsers;
		
		private string _Email;
		
		private string _Password;
		
		private System.Data.Linq.Binary _Logo;
		
		private string _Address;
		
		private string _Phone;
		
		private int _DistrictId;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships;
		
		private EntitySet<Category_Conduct> _Category_Conducts;
		
		private EntitySet<Category_Faculty> _Category_Faculties;
		
		private EntitySet<Category_Grade> _Category_Grades;
		
		private EntitySet<Category_LearningAptitude> _Category_LearningAptitudes;
		
		private EntitySet<Category_LearningResult> _Category_LearningResults;
		
		private EntitySet<Category_TeachingPeriod> _Category_TeachingPeriods;
		
		private EntitySet<Class_Class> _Class_Classes;
		
		private EntitySet<Configuration_Year> _Configuration_Years;
		
		private EntitySet<Student_Student> _Student_Students;
		
		private EntitySet<UserManagement_RoleDetail> _UserManagement_RoleDetails;
		
		private EntityRef<Configuration_District> _Configuration_District;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolIdChanging(int value);
    partial void OnSchoolIdChanged();
    partial void OnSchoolNameChanging(string value);
    partial void OnSchoolNameChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnTotalOfUsersChanging(int value);
    partial void OnTotalOfUsersChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnLogoChanging(System.Data.Linq.Binary value);
    partial void OnLogoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnDistrictIdChanging(int value);
    partial void OnDistrictIdChanged();
    #endregion
		
		public School_School()
		{
			this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
			this._Category_Conducts = new EntitySet<Category_Conduct>(new Action<Category_Conduct>(this.attach_Category_Conducts), new Action<Category_Conduct>(this.detach_Category_Conducts));
			this._Category_Faculties = new EntitySet<Category_Faculty>(new Action<Category_Faculty>(this.attach_Category_Faculties), new Action<Category_Faculty>(this.detach_Category_Faculties));
			this._Category_Grades = new EntitySet<Category_Grade>(new Action<Category_Grade>(this.attach_Category_Grades), new Action<Category_Grade>(this.detach_Category_Grades));
			this._Category_LearningAptitudes = new EntitySet<Category_LearningAptitude>(new Action<Category_LearningAptitude>(this.attach_Category_LearningAptitudes), new Action<Category_LearningAptitude>(this.detach_Category_LearningAptitudes));
			this._Category_LearningResults = new EntitySet<Category_LearningResult>(new Action<Category_LearningResult>(this.attach_Category_LearningResults), new Action<Category_LearningResult>(this.detach_Category_LearningResults));
			this._Category_TeachingPeriods = new EntitySet<Category_TeachingPeriod>(new Action<Category_TeachingPeriod>(this.attach_Category_TeachingPeriods), new Action<Category_TeachingPeriod>(this.detach_Category_TeachingPeriods));
			this._Class_Classes = new EntitySet<Class_Class>(new Action<Class_Class>(this.attach_Class_Classes), new Action<Class_Class>(this.detach_Class_Classes));
			this._Configuration_Years = new EntitySet<Configuration_Year>(new Action<Configuration_Year>(this.attach_Configuration_Years), new Action<Configuration_Year>(this.detach_Configuration_Years));
			this._Student_Students = new EntitySet<Student_Student>(new Action<Student_Student>(this.attach_Student_Students), new Action<Student_Student>(this.detach_Student_Students));
			this._UserManagement_RoleDetails = new EntitySet<UserManagement_RoleDetail>(new Action<UserManagement_RoleDetail>(this.attach_UserManagement_RoleDetails), new Action<UserManagement_RoleDetail>(this.detach_UserManagement_RoleDetails));
			this._Configuration_District = default(EntityRef<Configuration_District>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string SchoolName
		{
			get
			{
				return this._SchoolName;
			}
			set
			{
				if ((this._SchoolName != value))
				{
					this.OnSchoolNameChanging(value);
					this.SendPropertyChanging();
					this._SchoolName = value;
					this.SendPropertyChanged("SchoolName");
					this.OnSchoolNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalOfUsers", DbType="Int NOT NULL")]
		public int TotalOfUsers
		{
			get
			{
				return this._TotalOfUsers;
			}
			set
			{
				if ((this._TotalOfUsers != value))
				{
					this.OnTotalOfUsersChanging(value);
					this.SendPropertyChanging();
					this._TotalOfUsers = value;
					this.SendPropertyChanged("TotalOfUsers");
					this.OnTotalOfUsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", DbType="Int NOT NULL")]
		public int DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					if (this._Configuration_District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_aspnet_Membership", Storage="_aspnet_Memberships", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this._aspnet_Memberships;
			}
			set
			{
				this._aspnet_Memberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_Conduct", Storage="_Category_Conducts", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<Category_Conduct> Category_Conducts
		{
			get
			{
				return this._Category_Conducts;
			}
			set
			{
				this._Category_Conducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_Faculty", Storage="_Category_Faculties", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<Category_Faculty> Category_Faculties
		{
			get
			{
				return this._Category_Faculties;
			}
			set
			{
				this._Category_Faculties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_Grade", Storage="_Category_Grades", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<Category_Grade> Category_Grades
		{
			get
			{
				return this._Category_Grades;
			}
			set
			{
				this._Category_Grades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_LearningAptitude", Storage="_Category_LearningAptitudes", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<Category_LearningAptitude> Category_LearningAptitudes
		{
			get
			{
				return this._Category_LearningAptitudes;
			}
			set
			{
				this._Category_LearningAptitudes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_LearningResult", Storage="_Category_LearningResults", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<Category_LearningResult> Category_LearningResults
		{
			get
			{
				return this._Category_LearningResults;
			}
			set
			{
				this._Category_LearningResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Category_TeachingPeriod", Storage="_Category_TeachingPeriods", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<Category_TeachingPeriod> Category_TeachingPeriods
		{
			get
			{
				return this._Category_TeachingPeriods;
			}
			set
			{
				this._Category_TeachingPeriods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Class_Class", Storage="_Class_Classes", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<Class_Class> Class_Classes
		{
			get
			{
				return this._Class_Classes;
			}
			set
			{
				this._Class_Classes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Configuration_Year", Storage="_Configuration_Years", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<Configuration_Year> Configuration_Years
		{
			get
			{
				return this._Configuration_Years;
			}
			set
			{
				this._Configuration_Years.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_Student_Student", Storage="_Student_Students", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<Student_Student> Student_Students
		{
			get
			{
				return this._Student_Students;
			}
			set
			{
				this._Student_Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_School_UserManagement_RoleDetail", Storage="_UserManagement_RoleDetails", ThisKey="SchoolId", OtherKey="SchoolId")]
		public EntitySet<UserManagement_RoleDetail> UserManagement_RoleDetails
		{
			get
			{
				return this._UserManagement_RoleDetails;
			}
			set
			{
				this._UserManagement_RoleDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_District_School_School", Storage="_Configuration_District", ThisKey="DistrictId", OtherKey="DistrictId", IsForeignKey=true)]
		public Configuration_District Configuration_District
		{
			get
			{
				return this._Configuration_District.Entity;
			}
			set
			{
				Configuration_District previousValue = this._Configuration_District.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_District.Entity = null;
						previousValue.School_Schools.Remove(this);
					}
					this._Configuration_District.Entity = value;
					if ((value != null))
					{
						value.School_Schools.Add(this);
						this._DistrictId = value.DistrictId;
					}
					else
					{
						this._DistrictId = default(int);
					}
					this.SendPropertyChanged("Configuration_District");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_Category_Conducts(Category_Conduct entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_Category_Conducts(Category_Conduct entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_Category_Faculties(Category_Faculty entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_Category_Faculties(Category_Faculty entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_Category_Grades(Category_Grade entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_Category_Grades(Category_Grade entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_Category_LearningAptitudes(Category_LearningAptitude entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_Category_LearningAptitudes(Category_LearningAptitude entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_Category_LearningResults(Category_LearningResult entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_Category_LearningResults(Category_LearningResult entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_Category_TeachingPeriods(Category_TeachingPeriod entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_Category_TeachingPeriods(Category_TeachingPeriod entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_Class_Classes(Class_Class entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_Class_Classes(Class_Class entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_Configuration_Years(Configuration_Year entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_Configuration_Years(Configuration_Year entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_Student_Students(Student_Student entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_Student_Students(Student_Student entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
		
		private void attach_UserManagement_RoleDetails(UserManagement_RoleDetail entity)
		{
			this.SendPropertyChanging();
			entity.School_School = this;
		}
		
		private void detach_UserManagement_RoleDetails(UserManagement_RoleDetail entity)
		{
			this.SendPropertyChanging();
			entity.School_School = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class_Schedule")]
	public partial class Class_Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScheduleId;
		
		private int _SubjectId;
		
		private System.Guid _TeacherId;
		
		private int _ClassId;
		
		private int _TermId;
		
		private int _DayInWeekId;
		
		private int _SessionId;
		
		private int _TeachingPeriodId;
		
		private System.DateTime _LastUpdate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<Configuration_Session> _Configuration_Session;
		
		private EntityRef<Configuration_Term> _Configuration_Term;
		
		private EntityRef<Configuration_DayInWeek> _Configuration_DayInWeek;
		
		private EntityRef<Category_Subject> _Category_Subject;
		
		private EntityRef<Category_TeachingPeriod> _Category_TeachingPeriod;
		
		private EntityRef<Class_Class> _Class_Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScheduleIdChanging(int value);
    partial void OnScheduleIdChanged();
    partial void OnSubjectIdChanging(int value);
    partial void OnSubjectIdChanged();
    partial void OnTeacherIdChanging(System.Guid value);
    partial void OnTeacherIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnDayInWeekIdChanging(int value);
    partial void OnDayInWeekIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnTeachingPeriodIdChanging(int value);
    partial void OnTeachingPeriodIdChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public Class_Schedule()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._Configuration_Session = default(EntityRef<Configuration_Session>);
			this._Configuration_Term = default(EntityRef<Configuration_Term>);
			this._Configuration_DayInWeek = default(EntityRef<Configuration_DayInWeek>);
			this._Category_Subject = default(EntityRef<Category_Subject>);
			this._Category_TeachingPeriod = default(EntityRef<Category_TeachingPeriod>);
			this._Class_Class = default(EntityRef<Class_Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScheduleId
		{
			get
			{
				return this._ScheduleId;
			}
			set
			{
				if ((this._ScheduleId != value))
				{
					this.OnScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleId = value;
					this.SendPropertyChanged("ScheduleId");
					this.OnScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectId", DbType="Int NOT NULL")]
		public int SubjectId
		{
			get
			{
				return this._SubjectId;
			}
			set
			{
				if ((this._SubjectId != value))
				{
					if (this._Category_Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIdChanging(value);
					this.SendPropertyChanging();
					this._SubjectId = value;
					this.SendPropertyChanged("SubjectId");
					this.OnSubjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL")]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class_Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL")]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._Configuration_Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayInWeekId", DbType="Int NOT NULL")]
		public int DayInWeekId
		{
			get
			{
				return this._DayInWeekId;
			}
			set
			{
				if ((this._DayInWeekId != value))
				{
					if (this._Configuration_DayInWeek.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDayInWeekIdChanging(value);
					this.SendPropertyChanging();
					this._DayInWeekId = value;
					this.SendPropertyChanged("DayInWeekId");
					this.OnDayInWeekIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Configuration_Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeachingPeriodId", DbType="Int NOT NULL")]
		public int TeachingPeriodId
		{
			get
			{
				return this._TeachingPeriodId;
			}
			set
			{
				if ((this._TeachingPeriodId != value))
				{
					if (this._Category_TeachingPeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeachingPeriodIdChanging(value);
					this.SendPropertyChanging();
					this._TeachingPeriodId = value;
					this.SendPropertyChanged("TeachingPeriodId");
					this.OnTeachingPeriodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Class_Schedule", Storage="_aspnet_User", ThisKey="TeacherId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Class_Schedules.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Class_Schedules.Add(this);
						this._TeacherId = value.UserId;
					}
					else
					{
						this._TeacherId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Session_Class_Schedule", Storage="_Configuration_Session", ThisKey="SessionId", OtherKey="SessionId", IsForeignKey=true)]
		public Configuration_Session Configuration_Session
		{
			get
			{
				return this._Configuration_Session.Entity;
			}
			set
			{
				Configuration_Session previousValue = this._Configuration_Session.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Session.Entity = null;
						previousValue.Class_Schedules.Remove(this);
					}
					this._Configuration_Session.Entity = value;
					if ((value != null))
					{
						value.Class_Schedules.Add(this);
						this._SessionId = value.SessionId;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Configuration_Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_Term_Class_Schedule", Storage="_Configuration_Term", ThisKey="TermId", OtherKey="TermId", IsForeignKey=true)]
		public Configuration_Term Configuration_Term
		{
			get
			{
				return this._Configuration_Term.Entity;
			}
			set
			{
				Configuration_Term previousValue = this._Configuration_Term.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_Term.Entity = null;
						previousValue.Class_Schedules.Remove(this);
					}
					this._Configuration_Term.Entity = value;
					if ((value != null))
					{
						value.Class_Schedules.Add(this);
						this._TermId = value.TermId;
					}
					else
					{
						this._TermId = default(int);
					}
					this.SendPropertyChanged("Configuration_Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_DayInWeek_Class_Schedule", Storage="_Configuration_DayInWeek", ThisKey="DayInWeekId", OtherKey="DayInWeekId", IsForeignKey=true)]
		public Configuration_DayInWeek Configuration_DayInWeek
		{
			get
			{
				return this._Configuration_DayInWeek.Entity;
			}
			set
			{
				Configuration_DayInWeek previousValue = this._Configuration_DayInWeek.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_DayInWeek.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_DayInWeek.Entity = null;
						previousValue.Class_Schedules.Remove(this);
					}
					this._Configuration_DayInWeek.Entity = value;
					if ((value != null))
					{
						value.Class_Schedules.Add(this);
						this._DayInWeekId = value.DayInWeekId;
					}
					else
					{
						this._DayInWeekId = default(int);
					}
					this.SendPropertyChanged("Configuration_DayInWeek");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subject_Class_Schedule", Storage="_Category_Subject", ThisKey="SubjectId", OtherKey="SubjectId", IsForeignKey=true)]
		public Category_Subject Category_Subject
		{
			get
			{
				return this._Category_Subject.Entity;
			}
			set
			{
				Category_Subject previousValue = this._Category_Subject.Entity;
				if (((previousValue != value) 
							|| (this._Category_Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_Subject.Entity = null;
						previousValue.Class_Schedules.Remove(this);
					}
					this._Category_Subject.Entity = value;
					if ((value != null))
					{
						value.Class_Schedules.Add(this);
						this._SubjectId = value.SubjectId;
					}
					else
					{
						this._SubjectId = default(int);
					}
					this.SendPropertyChanged("Category_Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_TeachingPeriod_Class_Schedule", Storage="_Category_TeachingPeriod", ThisKey="TeachingPeriodId", OtherKey="TeachingPeriodId", IsForeignKey=true)]
		public Category_TeachingPeriod Category_TeachingPeriod
		{
			get
			{
				return this._Category_TeachingPeriod.Entity;
			}
			set
			{
				Category_TeachingPeriod previousValue = this._Category_TeachingPeriod.Entity;
				if (((previousValue != value) 
							|| (this._Category_TeachingPeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_TeachingPeriod.Entity = null;
						previousValue.Class_Schedules.Remove(this);
					}
					this._Category_TeachingPeriod.Entity = value;
					if ((value != null))
					{
						value.Class_Schedules.Add(this);
						this._TeachingPeriodId = value.TeachingPeriodId;
					}
					else
					{
						this._TeachingPeriodId = default(int);
					}
					this.SendPropertyChanged("Category_TeachingPeriod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Class_Class_Schedule", Storage="_Class_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class_Class Class_Class
		{
			get
			{
				return this._Class_Class.Entity;
			}
			set
			{
				Class_Class previousValue = this._Class_Class.Entity;
				if (((previousValue != value) 
							|| (this._Class_Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class_Class.Entity = null;
						previousValue.Class_Schedules.Remove(this);
					}
					this._Class_Class.Entity = value;
					if ((value != null))
					{
						value.Class_Schedules.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class_Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student_DetailedTermSubjectMark")]
	public partial class Student_DetailedTermSubjectMark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailedTermSubjectMark;
		
		private int _TermSubjectMarkId;
		
		private int _MarkType;
		
		private double _MarkValue;
		
		private System.DateTime _Date;
		
		private bool _Approved;
		
		private string _Note;
		
		private EntityRef<Category_MarkType> _Category_MarkType;
		
		private EntityRef<Student_TermSubjectMark> _Student_TermSubjectMark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailedTermSubjectMarkChanging(int value);
    partial void OnDetailedTermSubjectMarkChanged();
    partial void OnTermSubjectMarkIdChanging(int value);
    partial void OnTermSubjectMarkIdChanged();
    partial void OnMarkTypeChanging(int value);
    partial void OnMarkTypeChanged();
    partial void OnMarkValueChanging(double value);
    partial void OnMarkValueChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Student_DetailedTermSubjectMark()
		{
			this._Category_MarkType = default(EntityRef<Category_MarkType>);
			this._Student_TermSubjectMark = default(EntityRef<Student_TermSubjectMark>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailedTermSubjectMark", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailedTermSubjectMark
		{
			get
			{
				return this._DetailedTermSubjectMark;
			}
			set
			{
				if ((this._DetailedTermSubjectMark != value))
				{
					this.OnDetailedTermSubjectMarkChanging(value);
					this.SendPropertyChanging();
					this._DetailedTermSubjectMark = value;
					this.SendPropertyChanged("DetailedTermSubjectMark");
					this.OnDetailedTermSubjectMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermSubjectMarkId", DbType="Int NOT NULL")]
		public int TermSubjectMarkId
		{
			get
			{
				return this._TermSubjectMarkId;
			}
			set
			{
				if ((this._TermSubjectMarkId != value))
				{
					if (this._Student_TermSubjectMark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermSubjectMarkIdChanging(value);
					this.SendPropertyChanging();
					this._TermSubjectMarkId = value;
					this.SendPropertyChanged("TermSubjectMarkId");
					this.OnTermSubjectMarkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkType", DbType="Int NOT NULL")]
		public int MarkType
		{
			get
			{
				return this._MarkType;
			}
			set
			{
				if ((this._MarkType != value))
				{
					if (this._Category_MarkType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarkTypeChanging(value);
					this.SendPropertyChanging();
					this._MarkType = value;
					this.SendPropertyChanged("MarkType");
					this.OnMarkTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkValue", DbType="Float NOT NULL")]
		public double MarkValue
		{
			get
			{
				return this._MarkValue;
			}
			set
			{
				if ((this._MarkValue != value))
				{
					this.OnMarkValueChanging(value);
					this.SendPropertyChanging();
					this._MarkValue = value;
					this.SendPropertyChanged("MarkValue");
					this.OnMarkValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(200)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_MarkType_Student_DetailedTermSubjectMark", Storage="_Category_MarkType", ThisKey="MarkType", OtherKey="MarkTypeId", IsForeignKey=true)]
		public Category_MarkType Category_MarkType
		{
			get
			{
				return this._Category_MarkType.Entity;
			}
			set
			{
				Category_MarkType previousValue = this._Category_MarkType.Entity;
				if (((previousValue != value) 
							|| (this._Category_MarkType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category_MarkType.Entity = null;
						previousValue.Student_DetailedTermSubjectMarks.Remove(this);
					}
					this._Category_MarkType.Entity = value;
					if ((value != null))
					{
						value.Student_DetailedTermSubjectMarks.Add(this);
						this._MarkType = value.MarkTypeId;
					}
					else
					{
						this._MarkType = default(int);
					}
					this.SendPropertyChanged("Category_MarkType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_TermSubjectMark_Student_DetailedTermSubjectMark", Storage="_Student_TermSubjectMark", ThisKey="TermSubjectMarkId", OtherKey="TermSubjectMarkId", IsForeignKey=true)]
		public Student_TermSubjectMark Student_TermSubjectMark
		{
			get
			{
				return this._Student_TermSubjectMark.Entity;
			}
			set
			{
				Student_TermSubjectMark previousValue = this._Student_TermSubjectMark.Entity;
				if (((previousValue != value) 
							|| (this._Student_TermSubjectMark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student_TermSubjectMark.Entity = null;
						previousValue.Student_DetailedTermSubjectMarks.Remove(this);
					}
					this._Student_TermSubjectMark.Entity = value;
					if ((value != null))
					{
						value.Student_DetailedTermSubjectMarks.Add(this);
						this._TermSubjectMarkId = value.TermSubjectMarkId;
					}
					else
					{
						this._TermSubjectMarkId = default(int);
					}
					this.SendPropertyChanged("Student_TermSubjectMark");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageToParents_Message")]
	public partial class MessageToParents_Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageId;
		
		private string _Title;
		
		private string _MessageContent;
		
		private System.DateTime _Date;
		
		private bool _IsConfirmed;
		
		private bool _IsRead;
		
		private int _StudentInClassId;
		
		private string _Feedback;
		
		private System.Nullable<int> _MessageStatusId;
		
		private bool _Approved;
		
		private System.Nullable<System.Guid> _CreatedUserId;
		
		private EntityRef<Student_StudentInClass> _Student_StudentInClass;
		
		private EntityRef<Configuration_MessageStatus> _Configuration_MessageStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnMessageContentChanging(string value);
    partial void OnMessageContentChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsConfirmedChanging(bool value);
    partial void OnIsConfirmedChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnStudentInClassIdChanging(int value);
    partial void OnStudentInClassIdChanged();
    partial void OnFeedbackChanging(string value);
    partial void OnFeedbackChanged();
    partial void OnMessageStatusIdChanging(System.Nullable<int> value);
    partial void OnMessageStatusIdChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnCreatedUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedUserIdChanged();
    #endregion
		
		public MessageToParents_Message()
		{
			this._Student_StudentInClass = default(EntityRef<Student_StudentInClass>);
			this._Configuration_MessageStatus = default(EntityRef<Configuration_MessageStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageContent", DbType="NVarChar(500)")]
		public string MessageContent
		{
			get
			{
				return this._MessageContent;
			}
			set
			{
				if ((this._MessageContent != value))
				{
					this.OnMessageContentChanging(value);
					this.SendPropertyChanging();
					this._MessageContent = value;
					this.SendPropertyChanged("MessageContent");
					this.OnMessageContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsConfirmed", DbType="Bit NOT NULL")]
		public bool IsConfirmed
		{
			get
			{
				return this._IsConfirmed;
			}
			set
			{
				if ((this._IsConfirmed != value))
				{
					this.OnIsConfirmedChanging(value);
					this.SendPropertyChanging();
					this._IsConfirmed = value;
					this.SendPropertyChanged("IsConfirmed");
					this.OnIsConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentInClassId", DbType="Int NOT NULL")]
		public int StudentInClassId
		{
			get
			{
				return this._StudentInClassId;
			}
			set
			{
				if ((this._StudentInClassId != value))
				{
					if (this._Student_StudentInClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentInClassIdChanging(value);
					this.SendPropertyChanging();
					this._StudentInClassId = value;
					this.SendPropertyChanged("StudentInClassId");
					this.OnStudentInClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback", DbType="NVarChar(500)")]
		public string Feedback
		{
			get
			{
				return this._Feedback;
			}
			set
			{
				if ((this._Feedback != value))
				{
					this.OnFeedbackChanging(value);
					this.SendPropertyChanging();
					this._Feedback = value;
					this.SendPropertyChanged("Feedback");
					this.OnFeedbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageStatusId", DbType="Int")]
		public System.Nullable<int> MessageStatusId
		{
			get
			{
				return this._MessageStatusId;
			}
			set
			{
				if ((this._MessageStatusId != value))
				{
					if (this._Configuration_MessageStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageStatusIdChanging(value);
					this.SendPropertyChanging();
					this._MessageStatusId = value;
					this.SendPropertyChanged("MessageStatusId");
					this.OnMessageStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedUserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedUserId
		{
			get
			{
				return this._CreatedUserId;
			}
			set
			{
				if ((this._CreatedUserId != value))
				{
					this.OnCreatedUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedUserId = value;
					this.SendPropertyChanged("CreatedUserId");
					this.OnCreatedUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_MessageToParents_Message", Storage="_Student_StudentInClass", ThisKey="StudentInClassId", OtherKey="StudentInClassId", IsForeignKey=true)]
		public Student_StudentInClass Student_StudentInClass
		{
			get
			{
				return this._Student_StudentInClass.Entity;
			}
			set
			{
				Student_StudentInClass previousValue = this._Student_StudentInClass.Entity;
				if (((previousValue != value) 
							|| (this._Student_StudentInClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student_StudentInClass.Entity = null;
						previousValue.MessageToParents_Messages.Remove(this);
					}
					this._Student_StudentInClass.Entity = value;
					if ((value != null))
					{
						value.MessageToParents_Messages.Add(this);
						this._StudentInClassId = value.StudentInClassId;
					}
					else
					{
						this._StudentInClassId = default(int);
					}
					this.SendPropertyChanged("Student_StudentInClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_MessageStatus_MessageToParents_Message", Storage="_Configuration_MessageStatus", ThisKey="MessageStatusId", OtherKey="MessageStatusId", IsForeignKey=true)]
		public Configuration_MessageStatus Configuration_MessageStatus
		{
			get
			{
				return this._Configuration_MessageStatus.Entity;
			}
			set
			{
				Configuration_MessageStatus previousValue = this._Configuration_MessageStatus.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_MessageStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_MessageStatus.Entity = null;
						previousValue.MessageToParents_Messages.Remove(this);
					}
					this._Configuration_MessageStatus.Entity = value;
					if ((value != null))
					{
						value.MessageToParents_Messages.Add(this);
						this._MessageStatusId = value.MessageStatusId;
					}
					else
					{
						this._MessageStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Configuration_MessageStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParentComment_Comment")]
	public partial class ParentComment_Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentId;
		
		private string _Title;
		
		private string _CommentContent;
		
		private string _Feedback;
		
		private System.DateTime _Date;
		
		private int _CommentStatusId;
		
		private int _StudentInClassId;
		
		private System.Nullable<System.Guid> _CreatedUserId;
		
		private EntityRef<Student_StudentInClass> _Student_StudentInClass;
		
		private EntityRef<Configuration_CommentStatus> _Configuration_CommentStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIdChanging(int value);
    partial void OnCommentIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCommentContentChanging(string value);
    partial void OnCommentContentChanged();
    partial void OnFeedbackChanging(string value);
    partial void OnFeedbackChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCommentStatusIdChanging(int value);
    partial void OnCommentStatusIdChanged();
    partial void OnStudentInClassIdChanging(int value);
    partial void OnStudentInClassIdChanged();
    partial void OnCreatedUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedUserIdChanged();
    #endregion
		
		public ParentComment_Comment()
		{
			this._Student_StudentInClass = default(EntityRef<Student_StudentInClass>);
			this._Configuration_CommentStatus = default(EntityRef<Configuration_CommentStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentId
		{
			get
			{
				return this._CommentId;
			}
			set
			{
				if ((this._CommentId != value))
				{
					this.OnCommentIdChanging(value);
					this.SendPropertyChanging();
					this._CommentId = value;
					this.SendPropertyChanged("CommentId");
					this.OnCommentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentContent", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string CommentContent
		{
			get
			{
				return this._CommentContent;
			}
			set
			{
				if ((this._CommentContent != value))
				{
					this.OnCommentContentChanging(value);
					this.SendPropertyChanging();
					this._CommentContent = value;
					this.SendPropertyChanged("CommentContent");
					this.OnCommentContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback", DbType="NVarChar(300)")]
		public string Feedback
		{
			get
			{
				return this._Feedback;
			}
			set
			{
				if ((this._Feedback != value))
				{
					this.OnFeedbackChanging(value);
					this.SendPropertyChanging();
					this._Feedback = value;
					this.SendPropertyChanged("Feedback");
					this.OnFeedbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentStatusId", DbType="Int NOT NULL")]
		public int CommentStatusId
		{
			get
			{
				return this._CommentStatusId;
			}
			set
			{
				if ((this._CommentStatusId != value))
				{
					if (this._Configuration_CommentStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CommentStatusId = value;
					this.SendPropertyChanged("CommentStatusId");
					this.OnCommentStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentInClassId", DbType="Int NOT NULL")]
		public int StudentInClassId
		{
			get
			{
				return this._StudentInClassId;
			}
			set
			{
				if ((this._StudentInClassId != value))
				{
					if (this._Student_StudentInClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentInClassIdChanging(value);
					this.SendPropertyChanging();
					this._StudentInClassId = value;
					this.SendPropertyChanged("StudentInClassId");
					this.OnStudentInClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedUserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedUserId
		{
			get
			{
				return this._CreatedUserId;
			}
			set
			{
				if ((this._CreatedUserId != value))
				{
					this.OnCreatedUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedUserId = value;
					this.SendPropertyChanged("CreatedUserId");
					this.OnCreatedUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentInClass_ParentComment_Comment", Storage="_Student_StudentInClass", ThisKey="StudentInClassId", OtherKey="StudentInClassId", IsForeignKey=true)]
		public Student_StudentInClass Student_StudentInClass
		{
			get
			{
				return this._Student_StudentInClass.Entity;
			}
			set
			{
				Student_StudentInClass previousValue = this._Student_StudentInClass.Entity;
				if (((previousValue != value) 
							|| (this._Student_StudentInClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student_StudentInClass.Entity = null;
						previousValue.ParentComment_Comments.Remove(this);
					}
					this._Student_StudentInClass.Entity = value;
					if ((value != null))
					{
						value.ParentComment_Comments.Add(this);
						this._StudentInClassId = value.StudentInClassId;
					}
					else
					{
						this._StudentInClassId = default(int);
					}
					this.SendPropertyChanged("Student_StudentInClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Configuration_CommentStatus_ParentComment_Comment", Storage="_Configuration_CommentStatus", ThisKey="CommentStatusId", OtherKey="CommentStatusId", IsForeignKey=true)]
		public Configuration_CommentStatus Configuration_CommentStatus
		{
			get
			{
				return this._Configuration_CommentStatus.Entity;
			}
			set
			{
				Configuration_CommentStatus previousValue = this._Configuration_CommentStatus.Entity;
				if (((previousValue != value) 
							|| (this._Configuration_CommentStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Configuration_CommentStatus.Entity = null;
						previousValue.ParentComment_Comments.Remove(this);
					}
					this._Configuration_CommentStatus.Entity = value;
					if ((value != null))
					{
						value.ParentComment_Comments.Add(this);
						this._CommentStatusId = value.CommentStatusId;
					}
					else
					{
						this._CommentStatusId = default(int);
					}
					this.SendPropertyChanged("Configuration_CommentStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
